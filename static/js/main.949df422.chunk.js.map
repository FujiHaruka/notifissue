{"version":3,"sources":["components/OpenUnreadButton.module.css","hooks/common/useValues.ts","hooks/useModalContext.tsx","components/LayoutHeader.tsx","util/Func.ts","components/NotificationList.tsx","components/Welcome.tsx","components/NotificationFilter.tsx","components/OpenUnreadButton.tsx","components/modals/UnregisterModal.tsx","util/DB.ts","util/Api.ts","core/TaskScheduler.ts","core/GitHubServer.ts","hooks/common/useAsync.ts","hooks/common/useMount.ts","util/BNotification.ts","core/NotificationNotifier.ts","hooks/useObserverContext.tsx","components/modals/CommentModal.tsx","hooks/useComment.ts","components/modals/Modals.tsx","App.tsx","serviceWorker.ts","index.tsx","components/modals/CommentModal.module.css"],"names":["module","exports","self","help","useValues","initialValues","_useState","useState","_useState2","Object","slicedToArray","values","set","useMemo","action","prev","objectSpread","valuesSetter","ModalContext","createContext","useModalContext","useContext","LayoutHeader","_ref","user","setModalState","react_default","a","createElement","Menu","fixed","inverted","Container","Item","header","Header","as","Image","size","src","style","marginRight","position","Dropdown","trigger","color","avatar","avatar_url","name","content","text","icon","onClick","unregistrationModal","mapObjKey","callbackfn","obj","entries","map","_ref2","key","value","reduce","_ref3","_ref4","defineProperty","sleep","time","Promise","resolve","setTimeout","replacer","rawValue","this","Date","$type","$value","getTime","reviver","TypedJSON","JSON","stringify","parse","origins","pathParsers","pullRequestApi","PathParser","pullRequestHtml","issueApi","issueHtml","findHtmlUrl","notification","_notification$subject","subject","type","url","pathname","URL","repositoryUrl","repository","html_url","matched","test","build","console","error","concat","ListItemDesc","props","className","children","ListItem","date","updated_at","unread","reason","title","htmlUrl","onOpenCommentModal","useCallback","event","preventDefault","commentModal","commentModalParams","List","target","href","Content","floated","Label","tag","Detail","Icon","verticalAlign","Boolean","latest_comment_url","hasLatestComment","Description","NotificationList_ListItemDesc","full_name","moment","format","NotificationList","notifications","filter","divided","relaxed","selection","NotificationList_ListItem","id","Welcome","token","setToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","inputError","setInputError","onRegister","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","sent","stop","_x","apply","arguments","Fragment","textAlign","Subheader","Segment","basic","Input","Button","primary","_callee2","e","_context2","abrupt","_x2","placeholder","onChange","NotificationFilter","handleItemClick","compact","active","compareUpdateAt","b","OpenUnreadButton","sort","busy","setBusy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","undefined","Symbol","iterator","done","window","open","t0","return","finish","styles","disabled","Modal","circular","UnregisterModal","_useModalContext","onClose","onOk","onUnregister","Actions","negative","positive","labelPosition","uniqById","uniqBy","n","sortByUpdate","n1","n2","DB","storage","localStorage","maxNotifications","notificationKey","metaKey","tokenKey","userKey","bNotifiedKey","clear","getItem","getNotifications","saved","saving","toConsumableArray","sorted","setItem","length","reduced","slice","meta","bNotified","getBNotified","merged","removeItem","ApiUrls","GITHUB_BASE_URL","keysAsSnake","snake","convertQueryValue","toISOString","asQuery","pipe","qs","GitHubApi","options","classCallCheck","accessToken","fetch","resp","json","headersObj","headers","toLowerCase","lastModified","lastFetched","pollInterval","Number","ok","status","Error","message","statusText","commentUrl","comment","threadUrl","method","TaskScheduler","task","timer","minTimeout","running","doTask","timeout","setNextTimeout","clearTimeout","log","_context3","_this","_callee4","_context4","GitHubServer","db","api","subscriptions","Map","scheduler","ready","notificationsSyncTask","fetchNotifications","all","saveNotifications","saveNotificationMeta","Math","max","publishToSubscriptions","getAccessToken","getUser","observe","subscription","uuid","publishTo","getNotificationMeta","Array","from","startRunning","stopRunning","fetchAuthenticatedUser","saveUser","saveAccessToken","drop","fetchComment","markThreadAsRead","instance","useAsync","fn","emptyResult","_useValues","result","_useValues2","_useValues2$","doAsync","arg","_ref2$force","force","_ref2$allowParallel","allowParallel","_result","buildDoAsync","reset","useMount","onMount","onUnmount","useEffect","BNotification","isGranted","lifetime","body","Notification","close","bind","warn","permission","requestPermission","permittion","DEFAULT_REASONS","NotificationNotifier","reasons","bNotification","coming","validate","filterNewNotifications","spawnBrowserNotification","requestPermissionIfNeeded","notifiedMap","newNotifications","includes","saveBNotified","spawnNotification","getInstance","ObserverContext","useObserverContext","RepositoryLink","reposLink","split","pop","CommentModal","_useComment","server","_useObserverContext","setObserved","fetchLatestComment","markAsRead","commenting","index","nextNotifications","findIndex","useComment","shouldOpen","CommentModal_RepositoryLink","login","Dimmer","Loader","dangerouslySetInnerHTML","__html","marked","alt","Message","then","Modals","modals_UnregisterModal","modals_CommentModal","App","userRegistered","registerUser","unregisterUser","setFilter","components_LayoutHeader","paddingTop","marginBottom","components_NotificationFilter","components_OpenUnreadButton","src_components_NotificationList","components_Welcome","modals_Modals","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","useHook","Provider","setServerState","_useValues3","_useValues4","_useValues4$","runServer","subscribe","received","onNotifications","stopServer","unsubscribe","userOrNull","unregister","_onMount","_callee3","prepare","canRun","_onUnmount","_useObserver","src_App_0","document","getElementById","process","origin","addEventListener","response","contentType","get","indexOf","reload","checkValidServiceWorker"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,KAAA,+BAAAC,KAAA,gUCoBHC,EANc,SAACC,GAAkB,IAAAC,EACxBC,mBAASF,GADeG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvCK,EADuCH,EAAA,GAC/BI,EAD+BJ,EAAA,GAG9C,MAAO,CAACG,EADUE,kBAAQ,kBAbP,SAAID,GAAJ,OAAyC,SAC5DE,GAGEF,EADoB,oBAAXE,EACL,SAACC,GAAD,OAAAN,OAAAO,EAAA,EAAAP,CAAA,GAAgBM,EAASD,EAAOC,KAEhC,SAACA,GAAD,OAAAN,OAAAO,EAAA,EAAAP,CAAA,GAAgBM,EAASD,MAOCG,CAAaL,IAAM,CAACA,MCShDM,EAAeC,wBAA0C,MAElDC,EAAkB,kBAAMC,qBAAWH,ICoBjCI,EA3CM,SAAAC,GAAoD,IAAjDC,EAAiDD,EAAjDC,KACdC,EAAkBL,IAAlBK,cACR,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,QAAM,GACfR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,GAAG,KAAKL,UAAQ,GACtBL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,KAAK,OACLC,IAAI,WACJC,MAAO,CAAEC,YAAa,WAJ1B,eAUFf,EAAAC,EAAAC,cAACC,EAAA,EAAKA,KAAN,CAAWa,SAAS,SAClBhB,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,KACGT,GACCE,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,QACElB,EAAAC,EAAAC,cAAA,QAAMY,MAAO,CAAEK,MAAO,UACpBnB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOS,QAAM,EAACP,IAAKf,EAAKuB,aACvBvB,EAAKwB,OAGVtB,EAAAC,EAAAC,cAACe,EAAA,EAASd,KAAV,KACEH,EAAAC,EAAAC,cAACe,EAAA,EAASR,OAAV,CAAiBc,QAAQ,wBACzBvB,EAAAC,EAAAC,cAACe,EAAA,EAASV,KAAV,CACEiB,KAAK,mBACLC,KAAK,WACLC,QAAS,kBAAM3B,EAAc,CAAE4B,qBAAqB,2EC/B3DC,EAAY,SAACC,GAAD,OAAyC,SAChEC,GADgE,OAGhE/C,OAAOgD,QAAQD,GACZE,IAAI,SAAAnC,GAAA,IAAAoC,EAAAlD,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAAEqC,EAAFD,EAAA,GAAOE,EAAPF,EAAA,SAAkB,CAACJ,EAAWK,GAAMC,KACxCC,OAAO,SAACN,EAADO,GAAA,IAAAC,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAAOH,EAAPI,EAAA,GAAYH,EAAZG,EAAA,UAAAvD,OAAAO,EAAA,EAAAP,CAAA,GAA6B+C,EAA7B/C,OAAAwD,EAAA,EAAAxD,CAAA,GAAmCmD,EAAMC,KAAU,MASlDK,EAAQ,SAACC,GAAD,OACnB,IAAIC,QAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,MAMzCI,EAAW,SAASX,EAAaC,GACrC,IAAMW,EAAWC,KAAKb,GACtB,OAAIY,aAAoBE,KACf,CACLC,MALO,OAMPC,OAAQJ,EAASK,WAGdhB,GAEHiB,EAAU,SAASlB,EAAaC,GACpC,OAAIA,GAZO,SAYEA,EAAMc,MACV,IAAID,KAAKb,EAAMe,QAEjBf,GAEIkB,EACA,SAAClB,GAAD,OAAgBmB,KAAKC,UAAUpB,EAAOU,IADtCQ,EAEJ,SAAC7B,GAAD,OAAkB8B,KAAKE,MAAMhC,EAAM4B,IAMtCK,EAEE,qBAEFC,EAAc,CAClBC,eAAgB,IAAIC,IAAW,qCAC/BC,gBAAiB,IAAID,IAAW,8BAChCE,SAAU,IAAIF,IAAW,sCACzBG,UAAW,IAAIH,IAAW,iCAEfI,EAAc,SACzBC,GACW,IAAAC,EACWD,EAAaE,QAA3BC,EADGF,EACHE,KAAMC,EADHH,EACGG,IACNC,EAAa,IAAIC,IAAIF,GAArBC,SACFE,EAAgBP,EAAaQ,WAAWC,SAC9C,OAAQN,GACN,IAAK,cACH,IAAMO,EAAUjB,EAAYC,eAAeiB,KAAKN,GAChD,OAAKK,EAMElB,EAAeC,EAAYG,gBAAgBgB,MAAMF,IALtDG,QAAQC,MAAR,gFAAAC,OACkFX,IAE3EG,GAIX,IAAK,QACH,IAAMG,EAAUjB,EAAYI,SAASc,KAAKN,GAC1C,OAAKK,EAMElB,EAAeC,EAAYK,UAAUc,MAAMF,IALhDG,QAAQC,MAAR,0EAAAC,OAC4EX,IAErEG,GAIX,QACE,OAAOA,IChFPS,UAAe,SAACC,GAAD,OACnBlF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,kCAAkCD,EAAME,YAGpDC,EAAW,SAACH,GAAyD,IDUhDI,ECTjBvF,EAAkBL,IAAlBK,cACAkE,EAAiBiB,EAAjBjB,aACAE,EAAoDF,EAApDE,QAASoB,EAA2CtB,EAA3CsB,WAAYC,EAA+BvB,EAA/BuB,OAAQf,EAAuBR,EAAvBQ,WAAYgB,EAAWxB,EAAXwB,OACzCC,EAAgBvB,EAAhBuB,MAAOtB,EAASD,EAATC,KACTuB,EAAU3B,EAAYC,GACtB2B,EAAqBC,sBAAY,SAACC,GACtCA,EAAMC,iBACNhG,EAAc,CACZiG,cAAc,EACdC,mBAAoB,CAClBhC,mBAGH,IACH,OACEjE,EAAAC,EAAAC,cAACgG,EAAA,EAAK3F,KAAN,CACE4E,UAAU,uBACVzE,GAAG,IACHyF,OAAO,SACPC,KAAMT,GACN3F,EAAAC,EAAAC,cAACgG,EAAA,EAAKG,QAAN,CAAcC,QAAQ,SACpBtG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOC,KAAG,GACPpC,EACDpE,EAAAC,EAAAC,cAACqG,EAAA,EAAME,OAAP,KAAehB,KAGnBzF,EAAAC,EAAAC,cAACgG,EAAA,EAAKQ,KAAN,CACEpF,KAAMkE,EAAS,iBAAmB,uBAClCmB,cAAc,QAEhB3G,EAAAC,EAAAC,cAACgG,EAAA,EAAKG,QAAN,KACErG,EAAAC,EAAAC,cAACgG,EAAA,EAAKzF,OAAN,KACGiF,EDEqB,SAACzB,GAAD,OAC9B2C,QAAQ3C,EAAaE,QAAQ0C,oBCFpBC,CAAiB7C,IAChBjE,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACEpF,KAAK,4BACLH,MAAM,OACNgE,UAAU,+BACVO,MAAM,0BACNhE,QAASkE,KAIf5F,EAAAC,EAAAC,cAACgG,EAAA,EAAKa,YAAN,CAAkB5B,UAAU,6BAC1BnF,EAAAC,EAAAC,cAAC8G,EAAD,KAAevC,EAAWwC,WAC1BjH,EAAAC,EAAAC,cAAC8G,EAAD,YDpCiB1B,ECoCYC,EDnCrC2B,IAAO5B,GAAM6B,OAAO,0BCgEPC,EAtBU,SAAClC,GAGpB,IACEmC,EAA0BnC,EAA1BmC,cAIN,MAHe,WADiBnC,EAAXoC,SAEnBD,EAAgBA,EAAcC,OAAO,SAACrD,GAAD,OAAkBA,EAAauB,UAGpExF,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CACEqB,SAAO,EACPZ,cAAc,SACda,QAAQ,OACRC,WAAS,EACTtC,UAAU,oBACTkC,EAAcrF,IAAI,SAACiC,GAAD,OACjBjE,EAAAC,EAAAC,cAACwH,EAAD,CAAUxF,IAAK+B,EAAa0D,GAAI1D,aAAcA,0DCbvC2D,EAzDC,SAAC1C,GAEX,IAAAtG,EACsBC,mBAAS,IAD/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACGiJ,EADH/I,EAAA,GACUgJ,EADVhJ,EAAA,GAAAiJ,EAE0BlJ,oBAAS,GAFnCmJ,EAAAjJ,OAAAC,EAAA,EAAAD,CAAAgJ,EAAA,GAEGE,EAFHD,EAAA,GAEYE,EAFZF,EAAA,GAAAG,EAGgCtJ,oBAAS,GAHzCuJ,EAAArJ,OAAAC,EAAA,EAAAD,CAAAoJ,EAAA,GAGGE,EAHHD,EAAA,GAGeE,EAHfF,EAAA,GAIEG,EAAa1C,sBAAW,eAAAhG,EAAAd,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAC,SAAAC,EAAOd,GAAP,OAAAY,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,cAC7BR,GAAc,GADeO,EAAAC,KAAA,EAEJ5D,EAAMqD,WAAWV,GAFb,OAAAgB,EAAAE,MAI3BT,GAAc,GAJa,wBAAAO,EAAAG,SAAAL,EAAA5F,SAAD,gBAAAkG,GAAA,OAAApJ,EAAAqJ,MAAAnG,KAAAoG,YAAA,GAM3B,IACH,OACEnJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmJ,SAAA,KACEpJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,GAAG,KAAKe,MAAI,EAAC4H,UAAU,UAC7BrJ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAK,UAAUC,IAAI,aAC1Bb,EAAAC,EAAAC,cAACO,EAAA,EAAO4F,QAAR,mBACArG,EAAAC,EAAAC,cAACO,EAAA,EAAO6I,UAAR,4DAIFtJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAASpE,UAAU,kBAAkBqE,OAAK,EAACH,UAAU,UAArD,2NAKArJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAASpE,UAAU,kBAAkBqE,OAAK,EAACH,UAAU,UACnDrJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,GAAG,MAAX,eACC2H,GACCrI,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,uBAAhB,yBAEFnF,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CACErK,OACEY,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CACEC,SAAO,EACP1B,QAASA,EACTvG,QAAO,eAAAO,EAAAlD,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAE,SAAAkB,EAAOC,GAAP,OAAApB,EAAAxI,EAAA2I,KAAA,SAAAkB,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAhB,MAAA,UACFjB,EADE,CAAAiC,EAAAhB,KAAA,eAAAgB,EAAAC,OAAA,wBAEP7B,GAAW,GAFJ4B,EAAAhB,KAAA,EAGDP,EAAWV,GAHV,OAIPK,GAAW,GAJJ,wBAAA4B,EAAAd,SAAAY,EAAA7G,SAAF,gBAAAiH,GAAA,OAAA/H,EAAAiH,MAAAnG,KAAAoG,YAAA,IAHT,QAYFc,YAAY,sBACZC,SAAU,SAACL,EAADxH,GAAkB,IAAZF,EAAYE,EAAZF,MACd2F,EAAS3F,IAEX4C,MAAOsD,OC/BF8B,EA1BY,SAACjF,GAI1B,IAAMkF,EAAkB,SAACP,EAADhK,GAAA,IAAWyB,EAAXzB,EAAWyB,KAAX,OACtB4D,EAAMgF,SAAS5I,IACjB,OACEtB,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAASC,OAAK,EAACH,UAAU,UACvBrJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkK,SAAO,EAAClJ,MAAM,QAClBnB,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CACEe,KAAK,SACLgJ,OAAyB,WAAjBpF,EAAMoC,OACd5F,QAAS0I,EACT7I,QAAQ,WAEVvB,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CACEe,KAAK,MACLgJ,OAAyB,QAAjBpF,EAAMoC,OACd5F,QAAS0I,EACT7I,QAAQ,sCCfZgJ,EAAkB,SACtBtK,EACAuK,GAFsB,OAGnB,IAAIxH,KAAK/C,EAAEsF,YAAYpC,UAAY,IAAIH,KAAK/C,EAAEsF,YAAYpC,WA6ChDsH,EA3CU,SAACvF,GAGxB,IAAMM,EAASN,EAAMmC,cAClBC,OAAO,SAACrD,GAAD,OAAkBA,EAAauB,SACtCkF,KAAKH,GAHJ3L,EAIoBC,oBAAS,GAJ7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIG+L,EAJH7L,EAAA,GAIS8L,EAJT9L,EAAA,GAKE4C,EAAO,eAAA7B,EAAAd,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAG,SAAAC,IAAA,IAAAkC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhH,EAAA0B,EAAA,OAAA8C,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,OACd8B,GAAQ,GADMC,GAAA,EAAAC,GAAA,EAAAC,OAAAG,EAAArC,EAAAxJ,KAAA,EAAA2L,EAEaxF,EAFb2F,OAAAC,YAAA,UAAAP,GAAAI,EAAAD,EAAAlC,QAAAuC,KAAA,CAAAxC,EAAAC,KAAA,gBAEH7E,EAFGgH,EAAA9I,MAGNwD,EAAU3B,EAAYC,GAE5BqH,OAAOC,KAAK5F,GALAkD,EAAAC,KAAA,GAMNtG,EApBa,KAcP,QAAAqI,GAAA,EAAAhC,EAAAC,KAAA,gBAAAD,EAAAC,KAAA,iBAAAD,EAAAxJ,KAAA,GAAAwJ,EAAA2C,GAAA3C,EAAA,SAAAiC,GAAA,EAAAC,EAAAlC,EAAA2C,GAAA,QAAA3C,EAAAxJ,KAAA,GAAAwJ,EAAAxJ,KAAA,GAAAwL,GAAA,MAAAG,EAAAS,QAAAT,EAAAS,SAAA,WAAA5C,EAAAxJ,KAAA,IAAAyL,EAAA,CAAAjC,EAAAC,KAAA,eAAAiC,EAAA,eAAAlC,EAAA6C,OAAA,mBAAA7C,EAAA6C,OAAA,YAQdd,GAAQ,GARM,yBAAA/B,EAAAG,SAAAL,EAAA5F,KAAA,+BAAH,yBAAAlD,EAAAqJ,MAAAnG,KAAAoG,YAAA,GAUb,OACEnJ,EAAAC,EAAAC,cAAA,QAAMiF,UAAWwG,IAAOnN,MACtBwB,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CACEF,OAAK,EACLrI,MAAM,QACN8G,QAAS0C,EACTiB,SAAUjB,EACVjJ,QAASA,EACTH,QAAQ,oBAGVvB,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,CACE3K,QACElB,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CAAQoC,UAAQ,EAAClL,KAAK,OAAOuE,UAAWwG,IAAOlN,KAAMgD,KAAK,UAE5DzB,EAAAC,EAAAC,cAAC2L,EAAA,EAAMpL,OAAP,+BACAT,EAAAC,EAAAC,cAAC2L,EAAA,EAAMxF,QAAP,KACErG,EAAAC,EAAAC,cAAA,kFCfK6L,EA5BS,SAAC7G,GAAwC,IAAA8G,EACVtM,IAAxB6L,EADkCS,EACvDrK,oBAA2B5B,EAD4BiM,EAC5BjM,cAC7BkM,EAAUpG,sBACd,kBAAM9F,EAAc,CAAE4B,qBAAqB,KAC3C,IAEIuK,EAAOrG,sBAAY,WACvBX,EAAMiH,eACNF,KACC,IACH,OACEjM,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,CAAOjL,KAAK,OAAO2K,KAAMA,EAAMU,QAASA,GACtCjM,EAAAC,EAAAC,cAAC2L,EAAA,EAAMpL,OAAP,iCACAT,EAAAC,EAAAC,cAAC2L,EAAA,EAAMxF,QAAP,sBACArG,EAAAC,EAAAC,cAAC2L,EAAA,EAAMO,QAAP,KACEpM,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CAAQ2C,UAAQ,EAAC9K,QAAQ,KAAKG,QAASuK,IACvCjM,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CACE4C,UAAQ,EACR7K,KAAK,YACL8K,cAAc,QACdhL,QAAQ,MACRG,QAASwK,wJCpBbM,GAAWC,aAAO,SAACC,GAAD,OAAoCA,EAAE/E,KACxDgF,GAAejC,aACnB,SAACkC,EAAiCC,GAAlC,OACE,IAAI7J,KAAK6J,EAAGtH,YAAYpC,UAAY,IAAIH,KAAK4J,EAAGrH,YAAYpC,YAgHjD2J,qDA5GLC,QAAUzB,OAAO0B,kBAEjBC,iBAAmB,SACnBC,gBAAkB,iCAClBC,QAAU,gCACVC,SAAW,oBACXC,QAAU,mBACVC,aAAe,+KAKrBvK,KAAKgK,QAAQQ,sQAMPpL,EAAQY,KAAKgK,QAAQS,QAAQzK,KAAKmK,0DAE/B,oCAEF7J,EAAgBlB,wLAGDkF,6FACFtE,KAAK0K,0BAAnBC,SACAC,EAASnB,GAAQ,GAAAxH,OAAAjG,OAAA6O,GAAA,EAAA7O,CAAKsI,GAALtI,OAAA6O,GAAA,EAAA7O,CAAuB2O,KACxCG,EAASlB,GAAagB,GAC5B5K,KAAKgK,QAAQe,QAAQ/K,KAAKmK,gBAAiB7J,EAAoBwK,yRAInC9K,KAAK0K,gCAA3BpG,UACY0G,QAAUhL,KAAKkK,mEAI3Be,EAAU3G,EAAc4G,MAAM,EAAGlL,KAAKkK,kBAC5ClK,KAAKgK,QAAQe,QAAQ/K,KAAKmK,gBAAiB7J,EAAoB2K,qQAMzD7L,EAAQY,KAAKgK,QAAQS,QAAQzK,KAAKoK,kDAE/B,sCAEF9J,EAAgBlB,2LAGE+L,mEACzBnL,KAAKgK,QAAQe,QAAQ/K,KAAKoK,QAAS9J,EAAoB6K,+PAMjD/L,EAAQY,KAAKgK,QAAQS,QAAQzK,KAAKuK,uDAE/B,oCAEFjK,EAAgBlB,oLAGLgM,2FACEpL,KAAKqL,sBAAnBV,SACAW,iBACDX,EACAS,GAELpL,KAAKgK,QAAQe,QAAQ/K,KAAKuK,aAAcjK,EAAoBgL,uLAKxCxG,mEACpB9E,KAAKgK,QAAQe,QAAQ/K,KAAKqK,SAAUvF,gRAI7B9E,KAAKgK,QAAQS,QAAQzK,KAAKqK,gQAIjCrK,KAAKgK,QAAQuB,WAAWvL,KAAKqK,qLAKhBtN,mEACbiD,KAAKgK,QAAQe,QAAQ/K,KAAKsK,QAAShK,EAAoBvD,0PAIjDqC,EAAQY,KAAKgK,QAAQS,QAAQzK,KAAKsK,kDAE/B,sCAEFhK,EAAgBlB,kPAIvBY,KAAKgK,QAAQuB,WAAWvL,KAAKsK,uKCzG3BkB,GACcC,uCADdD,GAEgBC,8BAOhBC,GAAc7M,EAAU8M,UACxBC,GAAoB/M,EAAU,SAACO,GACnC,OAAIA,aAAiBa,KACZb,EAAMyM,cAEM,mBAAVzM,EACFA,EAAQ,OAAS,QAEnBA,IAGH0M,GAAUC,aACdL,GACAE,GAfqB,SAAC7M,GAAD,OACrBiN,KAAGxL,UAAUzB,EAAK,CAAEqF,OAAQ,cAoBT6H,cAGnB,SAAAA,EAAYC,GAAmClQ,OAAAmQ,GAAA,EAAAnQ,CAAAgE,KAAAiM,GAAAjM,KAF/CoM,iBAE8C,EAC5CpM,KAAKoM,YAAcF,EAAQE,oHAGJF,8GAKjB5K,EACJkK,GACA,IACAM,GAAQ9P,OAAAO,EAAA,EAAAP,CAAA,CACNoQ,YAAapM,KAAKoM,aACfF,aAEYG,MAAM/K,iBAAnBgL,kBACaA,EAAKC,cAAlBA,SAEAC,EAAkB,sCACSF,EAAKG,QAAQzN,8JAA5BG,OAAKC,OACrBoN,EAAWrN,EAAIuN,eAAiBtN,wTAE5BqN,EAAUD,EAEVrB,EAAyB,CAC7BwB,aAAc,IAAI1M,KAAKwM,EAAQ,kBAC/BG,YAAa,IAAI3M,KACjB4M,aAAcC,OAAOL,EAAQ,qBAG1BH,EAAKS,uBACY,MAAhBT,EAAKU,iDAEA,CACL7B,OACA7G,cAAe,mBAGb,IAAI2I,MAAMV,EAAKW,0CAGhB,CACL/B,OACA7G,cAAeiI,8SAKXjL,EACJkK,GACA,IACAM,GAAQ,CACNM,YAAapM,KAAKoM,uBAEHC,MAAM/K,cAAnBgL,UACIS,0BACRhL,QAAQC,MAAR,yBAAAC,OAAuCqK,EAAKU,OAA5C,KAAA/K,OAAsDqK,EAAKa,+BACpD,6BAEUb,EAAKC,qBAAlBxP,2BACCA,mLAMUqQ,oFACX9L,EACJ8L,EACA,IACAtB,GAAQ,CACNM,YAAapM,KAAKoM,uBAEHC,MAAM/K,cAAnBgL,UACIS,0BACRhL,QAAQC,MAAR,2BAAAC,OAAyCqK,EAAKU,OAA9C,KAAA/K,OAAwDqK,EAAKa,+BACtD,6BAEab,EAAKC,qBAArBc,2BACCA,wLAGcC,kFACfhM,EACJgM,EACA,IACAxB,GAAQ,CACNM,YAAapM,KAAKoM,uBAEHC,MAAM/K,EAAK,CAC5BiM,OAAQ,qBADJjB,UAGIS,0BACRhL,QAAQC,MAAR,mCAAAC,OACqCqK,EAAKU,OAD1C,KAAA/K,OACoDqK,EAAKa,gCAElD,oCAEF,+GCnIUK,cAMnB,SAAAA,EAAYC,GAA2BzR,OAAAmQ,GAAA,EAAAnQ,CAAAgE,KAAAwN,GAAAxN,KAL/ByN,UAK8B,EAAAzN,KAJ9B0N,OAAS,EAIqB1N,KAH9B2N,WAAa,IAGiB3N,KAF9B4N,SAAU,EAGhB5N,KAAKyN,KAAOA,gLAMRzN,KAAK4N,gEACT5N,KAAK4N,SAAU,WAEO5N,KAAK6N,gBAArBC,SACN9N,KAAK+N,eAAeD,mPAIpB9N,KAAK4N,SAAU,EACfI,aAAahO,KAAK0N,+PAMlB3L,QAAQkM,IAAR,2BACIH,EAAU9N,KAAK2N,6BAED3N,KAAKyN,cAArBK,yDAEA/L,QAAQC,MAARkM,EAAAzF,qCAEKqF,qJAGcA,GAAiB,IAAAK,EAAAnO,KACtCgO,aAAahO,KAAK0N,OAClB1N,KAAK0N,MAAQnF,OAAO1I,WAAP7D,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAkB,SAAAyI,IAAA,IAAAN,EAAA,OAAApI,EAAAxI,EAAA2I,KAAA,SAAAwI,GAAA,cAAAA,EAAA/R,KAAA+R,EAAAtI,MAAA,UACxBoI,EAAKP,QADmB,CAAAS,EAAAtI,KAAA,eAAAsI,EAAArH,OAAA,wBAAAqH,EAAAtI,KAAA,EAEPoI,EAAKN,SAFE,OAEvBC,EAFuBO,EAAArI,KAG7BmI,EAAKJ,eAAeD,GAHS,wBAAAO,EAAApI,SAAAmI,EAAApO,SAI5B8N,GACH/L,QAAQkM,IAAR,uCAAAhM,OAAmD6L,EAAnD,iBC7BiBQ,cAWnB,SAAAA,IAAc,IAAAH,EAAAnO,KAAAhE,OAAAmQ,GAAA,EAAAnQ,CAAAgE,KAAAsO,GAAAtO,KAVNuO,GAAK,IAAIxE,GAUH/J,KATNwO,IAAM,IAAIvC,GAAU,CAAEG,YAAa,KAS7BpM,KARNyO,cAAgB,IAAIC,IAQd1O,KAPNjD,KAAmC,KAO7BiD,KANN2O,eAMM,EAAA3O,KALN4N,SAAU,EAKJ5N,KAJN4O,OAAQ,EAIF5O,KAyFN6O,sBAzFM7S,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAyFkC,SAAAC,IAAA,IAAA1G,EAAAiM,EAAA7G,EAAAwJ,EAAA,OAAApI,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EACRoI,EAAKK,IAAIM,mBAAmB,CAEhEC,KAAK,IAHuC,cAAA7P,EAAA4G,EAAAE,KACtCmF,EADsCjM,EACtCiM,KAAM7G,EADgCpF,EAChCoF,cADgCwB,EAAAC,KAAA,EAKxCoI,EAAKI,GAAGS,kBAAkB1K,GALc,cAAAwB,EAAAC,KAAA,EAMxCoI,EAAKI,GAAGU,qBAAqB9D,GANW,cAOxC2C,EAAUoB,KAAKC,IACnBhE,EAAKyB,YAAYxM,UACK,IAApB+K,EAAK0B,cACL,IAAI5M,MAAOG,UACb,GAX4C0F,EAAAC,KAAA,GAaxCoI,EAAKiB,yBAbmC,eAAAtJ,EAAAkB,OAAA,SAcvC8G,GAduC,yBAAAhI,EAAAG,SAAAL,EAAA5F,SAxF9CA,KAAK2O,UAAY,IAAInB,GAAcxN,KAAK6O,kMAIpC7O,KAAK4O,uEACiB5O,KAAKuO,GAAGc,+BAA5BjD,kBACapM,KAAKuO,GAAGe,oBAArBvS,SACDqP,GAAgBrP,0BACnBiD,KAAK4O,OAAQ,6BAGf5O,KAAKwO,IAAIpC,YAAcA,EACvBpM,KAAKjD,KAAOA,EACZiD,KAAK4O,OAAQ,uIAMbW,EACArD,GAEA,IAAKlM,KAAK4N,QACR,MAAM,IAAIX,MAAJ,oDAGR,IACMuC,EAA0C,CAC9C5K,GAFS6K,OAGTF,UACArD,WAOF,OALAlM,KAAKyO,cAActS,IAAIqT,EAAa5K,GAAI4K,GAGnCxP,KAAK0P,UAAUF,GAEbA,wCAIPxP,KAAKyO,cAAcjE,kFAGGgF,6FACHxP,KAAKuO,GAAGe,wBAArBvS,kBACaiD,KAAKuO,GAAGoB,oCAArBxE,kBACsBnL,KAAKuO,GAAG7D,6BAA9BpG,SACDvH,GAASoO,qDACdqE,EAAaD,QAAQ,CACnBxS,OACAoO,OACA7G,2RAKyBsL,MAAMC,KAAK7P,KAAKyO,cAAcvS,6DAA9CsT,gBACHxP,KAAK0P,UAAUF,sKAOvB,IAAKxP,KAAKjD,KACR,MAAM,IAAIkQ,MAAJ,0CAER,GAAIjN,KAAK4N,QACP,MAAM,IAAIX,MAAJ,kCAERlL,QAAQkM,IAAR,gCACAjO,KAAK4N,SAAU,EACV5N,KAAK2O,UAAUmB,qDAIpB/N,QAAQkM,IAAR,+BACAjO,KAAK4N,SAAU,EACV5N,KAAK2O,UAAUoB,+CAIpB,OAAOlM,QAAQ7D,KAAKjD,QAAUiD,KAAK4N,iFAwBtB9I,gFAEb9E,KAAKwO,IAAIpC,YAActH,WACJ9E,KAAKwO,IAAIwB,mCAAtBjT,gCAEJiD,KAAKwO,IAAIpC,YAAc,qBAChB,6BAEHpM,KAAKuO,GAAG0B,SAASlT,2BACjBiD,KAAKuO,GAAG2B,gBAAgBpL,kBAC9B9E,KAAKjD,KAAOA,oBACLA,oQAIDiD,KAAKuO,GAAG4B,4LAKSjP,4EACjBkM,EAAalM,EAAaE,QAAQ0C,0CAEtC/B,QAAQC,MAAM,qEACP,sCAEFhC,KAAKwO,IAAI4B,aAAahD,kLAGdlM,4FACRlB,KAAKwO,IAAI6B,iBAAiBnP,EAAaI,iJAU9C,OAHKgN,EAAagC,WAChBhC,EAAagC,SAAW,IAAIhC,GAEvBA,EAAagC,kBA/JHhC,GA0JJgC,cAAqCnI,EC5JtD,IAgEeoI,GArCE,SACfC,EACAC,GAC0B,IAAAC,EACoB/U,EAE5C,CACAiT,OAAO,EACPhH,MAAM,EACN+I,OAAQF,EACRzO,MAAO,OAPiB4O,EAAA5U,OAAAC,EAAA,EAAAD,CAAA0U,EAAA,GAAAG,EAAAD,EAAA,GACjBhC,EADiBiC,EACjBjC,MAAOhH,EADUiJ,EACVjJ,KAAM+I,EADIE,EACJF,OAAQ3O,EADJ6O,EACI7O,MAAS7F,EADbyU,EAAA,GASpBE,EAAU1U,kBAAQ,kBAvCL,SACnBoU,EACArU,EACAyS,EACAhH,GAJmB,sBAAA9K,EAAAd,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAKhB,SAAAC,EAAOmL,EAAW7E,GAAlB,IAAAhN,EAAA8R,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA1L,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,UAAAiL,GAAA9R,EAC8CgN,GAAW,IAApD+E,aADL,IAAAD,KAAAE,EAAAhS,EACoBiS,qBADpB,IAAAD,MAECtC,GAAUqC,EAFX,CAAAnL,EAAAC,KAAA,eAAAD,EAAAkB,OAAA,qBAGCY,GAASuJ,EAHV,CAAArL,EAAAC,KAAA,eAAAD,EAAAkB,OAAA,wBAKH7K,EAAI,CAAEyL,MAAM,IALT9B,EAAAxJ,KAAA,EAAAwJ,EAAAC,KAAA,EAOoByK,EAAGO,GAPvB,OAOKJ,EAPL7K,EAAAE,KAQD7J,EAAI,CACFwU,SACA/B,OAAO,EACPhH,MAAM,IAXP9B,EAAAC,KAAA,iBAAAD,EAAAxJ,KAAA,GAAAwJ,EAAA2C,GAAA3C,EAAA,SAcD/D,QAAQC,MAAR8D,EAAA2C,IACAtM,EAAI,CACF6F,MAAK8D,EAAA2C,GACLb,MAAM,IAjBP,yBAAA9B,EAAAG,SAAAL,EAAA5F,KAAA,aALgB,gBAAAkG,EAAAe,GAAA,OAAAnK,EAAAqJ,MAAAnG,KAAAoG,YAAA,GAuCWiL,CAAab,EAAIrU,EAAKyS,EAAOhH,IAAO,CAChE4I,EACA5B,EACAhH,IAEI0J,EAAQxO,sBACZ,kBACE3G,EAAI,CACFyS,OAAO,EACPhH,MAAM,EACN+I,OAAQF,EACRzO,MAAO,QAEX,CAACyO,IAEH,MAAO,CACL7B,QACAhH,OACA+I,SACA3O,QACAsP,QACAR,YCnEWS,GAfE,SAAAzU,GAMX,IALJ0U,EAKI1U,EALJ0U,QACAC,EAII3U,EAJJ2U,UAKAC,oBAAU,WAER,OADKF,IACE,WACLC,MAED,KCTgBE,qDACnBC,WAAY,OACJC,SAAW,mEAED3F,GAChB,GAAKlM,KAAK4R,UAAV,CAD0D,IAKlDjP,EAAgBuJ,EAAhBvJ,MAAOmP,EAAS5F,EAAT4F,KACT5Q,EAAe,IAAI6Q,aAAapP,EAAO,CAC3CmP,OACApT,KAAM,eAERmB,WAAWqB,EAAa8Q,MAAMC,KAAK/Q,GAAelB,KAAK6R,eARrD9P,QAAQmQ,KAAR,uNAXuC,iBAAkB3J,2DAwB3B,YAA5BwJ,aAAaI,kCACfnS,KAAK4R,WAAY,qDAGZ,IAAIjS,QAAQ,SAACC,GACbmS,aAAaK,kBAChB,SAACC,GACClE,EAAKyD,UAA2B,YAAfS,EACjBzS,oHC3BJ0S,GAAuD,CAC3D,SACA,SACA,UACA,aACA,SACA,UACA,eACA,aACA,gBAQmBC,cAOnB,SAAAA,EAAoBrG,GAEhBlQ,OAAAmQ,GAAA,EAAAnQ,CAAAgE,KAAAuS,GAAAvS,KARIuO,GAAK,IAAIxE,GAQd/J,KANHwS,aAMG,EAAAxS,KAJHyS,cAAgB,IAAId,GAKlB3R,KAAKwS,QAAUtG,EAAQsG,SAAWF,wGAKdI,qGACA1S,KAAK2S,6FAGG3S,KAAK4S,uBAAuBF,WAAlDpO,UACY0G,OAAS,GACzBjJ,QAAQkM,IAAR,0BAAAhM,OAC4BqC,EAAc0G,OAD1C,sDAIyB1G,4EAAhBpD,oBACHlB,KAAK6S,yBAAyB3R,4BAC9BzB,EAAM,0hBAhC2B,iBAAkB8I,iDAqCb,0BAExCvI,KAAKyS,cAAcK,sCACpB9S,KAAKyS,cAAcb,oDAAkB,oCACnC,4LAIPtN,kGAE0BtE,KAAKuO,GAAGlD,6BAA5B0H,SACAC,EAAmB1O,EACtBC,OAAO,SAAAzH,GAAA,OAAAA,EAAG2F,SACV8B,OAAO,SAAArF,GAAA,IAAGwD,EAAHxD,EAAGwD,OAAH,OAAgByL,EAAKqE,QAAQS,SAASvQ,KAC7C6B,OACC,SAAAjF,GAAA,IAAGsF,EAAHtF,EAAGsF,GAAIpC,EAAPlD,EAAOkD,WAAP,OACGuQ,EAAYnO,IACbmO,EAAYnO,GAAIxE,UAAY,IAAIH,KAAKuC,GAAYpC,8BAEhD4S,mRAIPpO,OACAxD,YACAoB,wBAEMxC,KAAKuO,GAAG2E,cAARlX,OAAAwD,EAAA,EAAAxD,CAAA,GAAyB4I,EAAK,IAAI3E,KAAKuC,YAC7CxC,KAAKyS,cAAcU,kBAAkB,CACnCxQ,MAAOvB,EAAQC,KACfyQ,KAAM1Q,EAAQuB,oHA9DC4P,GAoEJjC,SAAwC,KApEpCiC,GAqEZa,YAAc,WAInB,OAHKb,GAAqBjC,WACxBiC,GAAqBjC,SAAW,IAAIiC,GAAqB,KAEpDA,GAAqBjC,UCnFhC,IA6EM+C,GAAkB3W,wBACtB,MAGW4W,GAAqB,kBAAM1W,qBAAWyW,KCnF7CE,GAAiB,SAAAzW,GAAA,IACrBoE,EADqBpE,EACrBoE,aADqB,OAKrBjE,EAAAC,EAAAC,cAAA,KACEiF,UAAWwG,KAAO4K,UAClBnQ,KAAMpC,EAAYC,GAClBkC,OAAO,UACNlC,EAAaQ,WAAWwC,UAJ3B,IAIqDhD,EAAaE,Qf4EnDE,IAAImS,MAAM,KAAKC,QeEjBC,GA1EM,WAAM,IAAA1K,EAKrBtM,IAHY6L,EAFSS,EAEvBhG,aACAC,EAHuB+F,EAGvB/F,mBACAlG,EAJuBiM,EAIvBjM,cAJuB4W,EClBD,WACxB,IAAMC,EAASvF,GAAa8E,cADEU,EAESR,KAA/BhP,EAFsBwP,EAEtBxP,cAAeyP,EAFOD,EAEPC,YAyBvB,MAAO,CACLC,mBAxByBzD,GACzB,SAACrP,GAAD,OACE2S,EAAOG,mBAAmB9S,IAC5B,MAsBA+S,WApBiB1D,GAAQ,eAAAzT,EAAAd,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KACzB,SAAAC,EAAOsO,GAAP,IAAAC,EAAAC,EAAA,OAAA1O,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EACmB8N,EAAOI,WAAWC,GADrC,UAAApO,EAAAE,KAAA,CAAAF,EAAAC,KAAA,eAAAD,EAAAkB,OAAA,UAGkB,GAHlB,aAIQmN,EAAQ7P,EAAc+P,UAAU,SAAAnV,GAAA,IAAG0F,EAAH1F,EAAG0F,GAAH,OAAYsP,EAAWtP,KAAOA,KACxD,GALd,CAAAkB,EAAAC,KAAA,eAAAD,EAAAkB,OAAA,UAKwB,GALxB,cAMQoN,EANRpY,OAAA6O,GAAA,EAAA7O,CAMgCsI,IACZ6P,GAAlBnY,OAAAO,EAAA,EAAAP,CAAA,GACKkY,EADL,CAEEzR,QAAQ,IAEVsR,EAAY,CAAEzP,cAAe8P,IAX/BtO,EAAAkB,OAAA,UAYS,GAZT,yBAAAlB,EAAAG,SAAAL,EAAA5F,SADyB,gBAAAkG,GAAA,OAAApJ,EAAAqJ,MAAAnG,KAAAoG,YAAA,IAezB,IDAyCkO,GAAnCN,EANiBJ,EAMjBI,mBAAoBC,EANHL,EAMGK,WAEtBM,EAAa/L,GAAQtF,EAAmBhC,aAE9CwQ,oBAAU,WACJ6C,GACGP,EAAmBlD,QAAQ5N,EAAmBhC,aAAc,CAC/D+P,OAAO,KAGV,CAACsD,IAEJ,IAAMrL,EAAUpG,sBAAY,WAC1B9F,EAAc,CAAEiG,cAAc,EAAOC,mBAAoB,KACzD8Q,EAAmB1C,QACnB2C,EAAW3C,SACV,IAEGQ,EAAOkC,EAAmBrD,QAAUqD,EAAmBrD,OAAOmB,KAEpE,IAAKyC,EAAY,OAAO,KAExB,IAAMrT,EAAegC,EAAmBhC,aAExC,OACEjE,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,CAAON,KAAMA,EAAMU,QAASA,GAC1BjM,EAAAC,EAAAC,cAAC2L,EAAA,EAAMpL,OAAP,CAAc0E,UAAWwG,KAAOnL,QAC9BR,EAAAC,EAAAC,cAACqX,GAAD,CAAgBtT,aAAcA,IADhC,oBAEoB,IAClBjE,EAAAC,EAAAC,cAAA,QAAMiF,UAAWwG,KAAO7L,MAAxB,IACIiX,EAAmBrD,QAAUqD,EAAmBrD,OAAO5T,KAAK0X,QAGlExX,EAAAC,EAAAC,cAAC2L,EAAA,EAAMxF,QAAP,KACErG,EAAAC,EAAAC,cAACuX,EAAA,EAAD,CAAQnN,OAAQyM,EAAmBpM,KAAMtK,UAAQ,GAC/CL,EAAAC,EAAAC,cAACwX,EAAA,EAAD,CAAQrX,UAAQ,KAEjB0W,EAAmBpF,OAASkD,GAC3B7U,EAAAC,EAAAC,cAAA,OAAKyX,wBAAyB,CAAEC,OAAQC,KAAOhD,MAEhDkC,EAAmBpF,QAAUkD,GAC5B7U,EAAAC,EAAAC,cAAA,OAAKiF,UAAWwG,KAAOmM,KAAvB,mBAEDf,EAAmBhS,OAClB/E,EAAAC,EAAAC,cAAC6X,EAAA,EAAD,CACE1L,UAAQ,EACR7L,OAAQ,QACRe,QAASwV,EAAmBhS,MAAMkL,WAIxCjQ,EAAAC,EAAAC,cAAC2L,EAAA,EAAMO,QAAP,KACEpM,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,CACE4C,UAAQ,EACR7K,KAAK,YACL8K,cAAc,QACdhL,QAAQ,eACR0G,QAAS+O,EAAWrM,KACpBjJ,QAAS,WACPoD,QAAQkM,IAAI,UAAW/M,GAClB+S,EAAWnD,QAAQ5P,GAAc+T,KAAK,kBAAM/L,YE1E9CgM,GATA,SAAApY,GAAoD,IAAjDsM,EAAiDtM,EAAjDsM,aAChB,OACEnM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmJ,SAAA,KACEpJ,EAAAC,EAAAC,cAACgY,EAAD,CAAiB/L,aAAcA,IAC/BnM,EAAAC,EAAAC,cAACiY,GAAD,QCsCSC,GApCH,WAAM,IAAAvB,EASZR,KAPF1E,EAFckF,EAEdlF,MACA0G,EAHcxB,EAGdwB,eACAvY,EAJc+W,EAId/W,KACAuH,EALcwP,EAKdxP,cAEAiR,GAPczB,EAMd3I,KANc2I,EAOdyB,cACAC,EARc1B,EAQd0B,eARc3Z,EAUYC,mBAAiB,UAV7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAUT0I,EAVSxI,EAAA,GAUD0Z,EAVC1Z,EAAA,GAYhB,OAAK6S,EAGH3R,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,OACbnF,EAAAC,EAAAC,cAACuY,EAAD,CAAc3Y,KAAMA,IAEpBE,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWkB,MAAI,EAACV,MAAO,CAAE4X,WAAY,MAAOC,aAAc,QACvDN,GACCrY,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmJ,SAAA,KACEpJ,EAAAC,EAAAC,cAAC0Y,EAAD,CAAoBtR,OAAQA,EAAQ4C,SAAUsO,IAC9CxY,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,wBACbnF,EAAAC,EAAAC,cAAC2Y,EAAD,CAAkBxR,cAAeA,KAEnCrH,EAAAC,EAAAC,cAAC4Y,EAAD,CAAkBzR,cAAeA,EAAeC,OAAQA,MAG1D+Q,GAAkBrY,EAAAC,EAAAC,cAAC6Y,EAAD,CAASxQ,WAAY+P,KAG3CtY,EAAAC,EAAAC,cAAC8Y,GAAD,CAAQ7M,aAAcoM,KAnBP,MCZfU,GAAcrS,QACW,cAA7B0E,OAAO4N,SAASC,UAEe,UAA7B7N,OAAO4N,SAASC,UAEhB7N,OAAO4N,SAASC,SAASC,MACvB,2DA8CN,SAASC,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTtB,KAAK,SAAC2B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BnV,QAAQkM,IACN,gHAKEuI,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB7U,QAAQkM,IAAI,sCAGRuI,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BS,MAAM,SAACrV,GACND,QAAQC,MAAM,4CAA6CA,KC9FjEsV,IAASC,OACPta,EAAAC,EAAAC,ctBmBkC,SAACgF,GACnC,IAAM8U,EAjBQ,WAAM,IAAAvG,EACY/U,EAAsB,CACpDiD,qBAAqB,EACrBqE,cAAc,EACdC,mBAAoB,KAJF0N,EAAA5U,OAAAC,EAAA,EAAAD,CAAA0U,EAAA,GACbxU,EADa0U,EAAA,GACL5T,EADK4T,EAAA,GAMpB,OAAO5U,OAAAO,EAAA,EAAAP,CAAA,GACFE,EADL,CAEEc,kBASYwa,GACd,OACEva,EAAAC,EAAAC,cAACV,EAAagb,SAAd,CAAuBrY,MAAO6X,GAC3B9U,EAAME,WsBvBX,KACEpF,EAAAC,EAAAC,cNmFmC,SAACgF,GACtC,IAAM/C,EApFa,WACnB,IAAMyU,EAASvF,GAAa8E,cADH1C,EAG2B/U,EAAU,CAC5DiT,OAAO,EACP0G,gBAAgB,IALO1E,EAAA5U,OAAAC,EAAA,EAAAD,CAAA0U,EAAA,GAAAG,EAAAD,EAAA,GAGhBhC,EAHgBiC,EAGhBjC,MAAO0G,EAHSzE,EAGTyE,eAAkBoC,EAHT9G,EAAA,GAAA+G,EAO4Bhc,EAEnD,CACAoB,KAAM,KACNuH,cAAe,GACf6G,KAAM,OAZiByM,EAAA5b,OAAAC,EAAA,EAAAD,CAAA2b,EAAA,GAAAE,EAAAD,EAAA,GAOhB7a,EAPgB8a,EAOhB9a,KAAMuH,EAPUuT,EAOVvT,cAAe6G,EAPL0M,EAOK1M,KAAQ4I,EAPb6D,EAAA,GAenBE,EAAYhV,sBAAY,WAC5B+Q,EAAO/D,eACP+D,EAAOkE,UAAU,SAACC,GAChBjE,EAAYiE,GACPzF,GAAqBa,cAAc6E,gBACtCD,EAAS1T,gBAEV,KACF,IACG4T,EAAapV,sBAAY,WAC7B+Q,EAAOsE,cACPtE,EAAO9D,eACN,IAGGwF,EAAezS,sBAAW,eAAAhG,EAAAd,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAC,SAAAC,EAAOd,GAAP,IAAAsT,EAAA,OAAA1S,EAAAxI,EAAA2I,KAAA,SAAAC,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EACN8N,EAAO8C,SAAS7R,GADV,UACzBsT,EADyBtS,EAAAE,KAE/B0R,EAAe,CAAEpC,eAAgBzR,QAAQuU,KACpCA,EAH0B,CAAAtS,EAAAC,KAAA,eAAAD,EAAAkB,OAAA,SAGP,MAHO,cAI/B8Q,IAJ+BhS,EAAAkB,OAAA,SAKxBoR,GALwB,wBAAAtS,EAAAG,SAAAL,EAAA5F,SAAD,gBAAAkG,GAAA,OAAApJ,EAAAqJ,MAAAnG,KAAAoG,YAAA,GAM7B,IACGoP,EAAiB1S,sBAAW9G,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAC,SAAAkB,IAAA,OAAAnB,EAAAxI,EAAA2I,KAAA,SAAAkB,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAhB,MAAA,cACjCmS,IADiCnR,EAAAhB,KAAA,EAE3B8N,EAAOwE,aAFoB,OAGjCX,EAAe,CAAEpC,gBAAgB,IACjCvB,EAAY,CACVhX,KAAM,KACNuH,cAAe,GACf6G,KAAM,OAPyB,wBAAApE,EAAAd,SAAAY,EAAA7G,SAShC,IAmBH,OAjBAuR,GAAS,CACPC,QAAO,eAAA8G,EAAAtc,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAE,SAAA4S,IAAA,IAAAjD,EAAA,OAAA5P,EAAAxI,EAAA2I,KAAA,SAAAqI,GAAA,cAAAA,EAAA5R,KAAA4R,EAAAnI,MAAA,cAAAmI,EAAAnI,KAAA,EACD8N,EAAO2E,UADN,QAEDlD,EAAiBzB,EAAO4E,WAE5BX,IAEFJ,EAAe,CACb9I,OAAO,EACP0G,mBARK,wBAAApH,EAAAjI,SAAAsS,EAAAvY,SAAF,yBAAAsY,EAAAnS,MAAAnG,KAAAoG,YAAA,GAWPqL,UAAS,eAAAiH,EAAA1c,OAAAyJ,EAAA,EAAAzJ,CAAA0J,EAAAxI,EAAAyI,KAAE,SAAAyI,IAAA,OAAA1I,EAAAxI,EAAA2I,KAAA,SAAAwI,GAAA,cAAAA,EAAA/R,KAAA+R,EAAAtI,MAAA,OACTmS,IADS,wBAAA7J,EAAApI,SAAAmI,EAAApO,SAAF,yBAAA0Y,EAAAvS,MAAAnG,KAAAoG,YAAA,KAKJ,CACLwI,QACA0G,iBACAvY,OACAuH,gBACA6G,OACA4I,cACAwB,eACAC,kBAWYmD,GACd,OACE1b,EAAAC,EAAAC,cAACkW,GAAgBoE,SAAjB,CAA0BrY,MAAOA,GAC9B+C,EAAME,WMvFT,KACEpF,EAAAC,EAAAC,cAACyb,GAAD,QAGJC,SAASC,eAAe,SDWnB,SAAkBtC,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIjV,IACnBuX,cACDxQ,OAAO4N,SAAS9S,MAEJ2V,SAAWzQ,OAAO4N,SAAS6C,OAIvC,OAGFzQ,OAAO0Q,iBAAiB,OAAQ,WAC9B,IAAM1C,EAAK,GAAAtU,OAAM8W,cAAN,sBAEP7C,IAgEV,SAAiCK,EAAeC,GAE9CnK,MAAMkK,GACHtB,KAAK,SAACiE,GAEL,IAAMC,EAAcD,EAASzM,QAAQ2M,IAAI,gBAEnB,MAApBF,EAASlM,QACO,MAAfmM,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5C,UAAUC,cAAc9H,MAAMqG,KAAK,SAAC2B,GAClCA,EAAayB,aAAapD,KAAK,WAC7B1M,OAAO4N,SAASmD,aAKpBhD,GAAgBC,EAAOC,KAG1Ba,MAAM,WACLtV,QAAQkM,IACN,mEArFAsL,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAc9H,MAAMqG,KAAK,WACjClT,QAAQkM,IACN,+GAMJqI,GAAgBC,EAAOC,MCvC/BE,uBClBAnb,EAAAC,QAAA,CAAkBiC,OAAA,6BAAAsX,IAAA,0BAAAvB,UAAA,gCAAAzW,KAAA","file":"static/js/main.949df422.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"self\":\"OpenUnreadButton_self__3rPAS\",\"help\":\"OpenUnreadButton_help__2ug8A\"};","import { useState, Dispatch, SetStateAction, useMemo } from 'react'\n\nexport type UseValuesAction<T> = Dispatch<SetStateAction<Partial<T>>>\n\nconst valuesSetter = <T>(set: Dispatch<SetStateAction<T>>) => (\n  action: SetStateAction<Partial<T>>,\n) => {\n  if (typeof action === 'function') {\n    set((prev) => ({ ...prev, ...action(prev) }))\n  } else {\n    set((prev) => ({ ...prev, ...action }))\n  }\n}\n\nexport type UseValues = <T>(initialValues: T) => [T, UseValuesAction<T>]\nconst useValues: UseValues = (initialValues) => {\n  const [values, set] = useState(initialValues)\n  const setValues = useMemo(() => valuesSetter(set), [set])\n  return [values, setValues]\n}\n\nexport default useValues\n","import React, { createContext, ReactChild, useContext } from 'react'\nimport useValues from './common/useValues'\nimport { GitHubResponse } from '../types/GitHubResponse'\n\ntype CommentModalParams = {\n  notification?: GitHubResponse.Notification\n}\n\ntype ModalState = {\n  unregistrationModal: boolean\n  commentModal: boolean\n  commentModalParams: CommentModalParams\n}\n\nconst useHook = () => {\n  const [values, setModalState] = useValues<ModalState>({\n    unregistrationModal: false,\n    commentModal: false,\n    commentModalParams: {},\n  })\n  return {\n    ...values,\n    setModalState,\n  }\n}\n\nconst ModalContext = createContext<ReturnType<typeof useHook>>(null as any)\n\nexport const useModalContext = () => useContext(ModalContext)\n\nexport const ModalContextProvider = (props: { children: ReactChild }) => {\n  const state = useHook()\n  return (\n    <ModalContext.Provider value={state}>\n      {props.children}\n    </ModalContext.Provider>\n  )\n}\n","import React from 'react'\nimport { Container, Image, Menu, Header, Dropdown } from 'semantic-ui-react'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { useModalContext } from '../hooks/useModalContext'\n\nconst LayoutHeader = ({ user }: { user: GitHubResponse.User | null }) => {\n  const { setModalState } = useModalContext()\n  return (\n    <Menu fixed='top' inverted>\n      <Container>\n        <Menu.Item header>\n          <Header as='h3' inverted>\n            <Image\n              size='mini'\n              src='logo.png'\n              style={{ marginRight: '1.5em' }}\n            />\n            Notifissue\n          </Header>\n        </Menu.Item>\n\n        <Menu.Menu position='right'>\n          <Menu.Item>\n            {user && (\n              <Dropdown\n                trigger={\n                  <span style={{ color: 'white' }}>\n                    <Image avatar src={user.avatar_url} />\n                    {user.name}\n                  </span>\n                }>\n                <Dropdown.Menu>\n                  <Dropdown.Header content='Signed in by GitHub' />\n                  <Dropdown.Item\n                    text='Unregister token'\n                    icon='sign out'\n                    onClick={() => setModalState({ unregistrationModal: true })}\n                  />\n                </Dropdown.Menu>\n              </Dropdown>\n            )}\n          </Menu.Item>\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  )\n}\n\nexport default LayoutHeader\n","import { PlainObject } from '../types/General'\nimport moment from 'moment'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport PathParser from 'path-parser'\n\nexport const mapObjKey = (callbackfn: (key: string) => string) => (\n  obj: PlainObject,\n): PlainObject =>\n  Object.entries(obj)\n    .map(([key, value]) => [callbackfn(key), value])\n    .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n\nexport const mapObjValue = (callbackfn: (value: any) => any) => (\n  obj: PlainObject,\n): PlainObject =>\n  Object.entries(obj)\n    .map(([key, value]) => [key, callbackfn(value)])\n    .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n\nexport const sleep = (time: number) =>\n  new Promise((resolve) => setTimeout(resolve, time))\n\nexport const formatDate = (date: Date | string) =>\n  moment(date).format('YYYY/MM/DD HH:mm')\n\nconst DATE = 'Date'\nconst replacer = function(key: string, value: any): any {\n  const rawValue = this[key]\n  if (rawValue instanceof Date) {\n    return {\n      $type: DATE,\n      $value: rawValue.getTime(),\n    }\n  }\n  return value\n}\nconst reviver = function(key: string, value: any) {\n  if (value && value.$type === DATE) {\n    return new Date(value.$value)\n  }\n  return value\n}\nexport const TypedJSON = {\n  stringify: (value: any) => JSON.stringify(value, replacer),\n  parse: (text: string) => JSON.parse(text, reviver),\n}\n\nexport const hasLatestComment = (notification: GitHubResponse.Notification) =>\n  Boolean(notification.subject.latest_comment_url)\n\nconst origins = {\n  api: 'https://api.github.com',\n  html: 'https://github.com',\n}\nconst pathParsers = {\n  pullRequestApi: new PathParser('/repos/:owner/:repo/pulls/:number'),\n  pullRequestHtml: new PathParser('/:owner/:repo/pull/:number'),\n  issueApi: new PathParser('/repos/:owner/:repo/issues/:number'),\n  issueHtml: new PathParser('/:owner/:repo/issues/:number'),\n}\nexport const findHtmlUrl = (\n  notification: GitHubResponse.Notification,\n): string => {\n  const { type, url } = notification.subject\n  const { pathname } = new URL(url)\n  const repositoryUrl = notification.repository.html_url // マッチしないとき用の URL\n  switch (type) {\n    case 'PullRequest': {\n      const matched = pathParsers.pullRequestApi.test(pathname)\n      if (!matched) {\n        console.error(\n          `Something wrong on finding HTML URL. Type is \"PullRequest\", but given URL is ${url}`,\n        )\n        return repositoryUrl\n      }\n      return origins.html + pathParsers.pullRequestHtml.build(matched)\n    }\n    case 'Issue': {\n      const matched = pathParsers.issueApi.test(pathname)\n      if (!matched) {\n        console.error(\n          `Something wrong on finding HTML URL. Type is \"Issue\", but given URL is ${url}`,\n        )\n        return repositoryUrl\n      }\n      return origins.html + pathParsers.issueHtml.build(matched)\n    }\n    default:\n      return repositoryUrl\n  }\n}\n\nexport const subjectNumber = (\n  subject: GitHubResponse.NotificationSubject,\n): string => {\n  return subject.url.split('/').pop()!\n}\n","import React, { useCallback } from 'react'\nimport { List, Label, Icon } from 'semantic-ui-react'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { formatDate, findHtmlUrl, hasLatestComment } from '../util/Func'\nimport './NotificationList.css'\nimport { Filter } from '../types/Core'\nimport { useModalContext } from '../hooks/useModalContext'\n\nconst ListItemDesc = (props: { children: any }) => (\n  <span className='NotificationListItem-desc-item'>{props.children}</span>\n)\n\nconst ListItem = (props: { notification: GitHubResponse.Notification }) => {\n  const { setModalState } = useModalContext()\n  const { notification } = props\n  const { subject, updated_at, unread, repository, reason } = notification\n  const { title, type } = subject\n  const htmlUrl = findHtmlUrl(notification)\n  const onOpenCommentModal = useCallback((event: any) => {\n    event.preventDefault()\n    setModalState({\n      commentModal: true,\n      commentModalParams: {\n        notification,\n      },\n    })\n  }, [])\n  return (\n    <List.Item\n      className='NotificationListItem'\n      as='a'\n      target='_blank'\n      href={htmlUrl}>\n      <List.Content floated='right'>\n        <Label tag>\n          {type}\n          <Label.Detail>{reason}</Label.Detail>\n        </Label>\n      </List.Content>\n      <List.Icon\n        name={unread ? 'circle outline' : 'check circle outline'}\n        verticalAlign='top'\n      />\n      <List.Content>\n        <List.Header>\n          {title}\n          {hasLatestComment(notification) && (\n            <Icon\n              name='comment alternate outline'\n              color='blue'\n              className='NotificationListItem-comment'\n              title='View latest comment now'\n              onClick={onOpenCommentModal}\n            />\n          )}\n        </List.Header>\n        <List.Description className='NotificationListItem-desc'>\n          <ListItemDesc>{repository.full_name}</ListItemDesc>\n          <ListItemDesc>At {formatDate(updated_at)}</ListItemDesc>\n        </List.Description>\n      </List.Content>\n    </List.Item>\n  )\n}\n\nconst NotificationList = (props: {\n  notifications: GitHubResponse.Notification[]\n  filter: Filter\n}) => {\n  let { notifications, filter } = props\n  if (filter === 'unread') {\n    notifications = notifications.filter((notification) => notification.unread)\n  }\n  return (\n    <List\n      divided\n      verticalAlign='middle'\n      relaxed='very'\n      selection\n      className='NotificationList'>\n      {notifications.map((notification) => (\n        <ListItem key={notification.id} notification={notification} />\n      ))}\n    </List>\n  )\n}\n\nexport default NotificationList\n","import React, { useState, useCallback } from 'react'\nimport {\n  Header,\n  Image,\n  Segment,\n  Input,\n  Button,\n  Message,\n} from 'semantic-ui-react'\nimport { GitHubResponse } from '../types/GitHubResponse'\n\nconst Welcome = (props: {\n  onRegister: (token: string) => Promise<GitHubResponse.User | null>\n}) => {\n  const [token, setToken] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [inputError, setInputError] = useState(false)\n  const onRegister = useCallback(async (token: string) => {\n    setInputError(false)\n    const userOrNull = await props.onRegister(token)\n    if (!userOrNull) {\n      setInputError(true)\n    }\n  }, [])\n  return (\n    <>\n      <Header as='h1' icon textAlign='center'>\n        <Image size='massive' src='logo.png' />\n        <Header.Content>Notifissue</Header.Content>\n        <Header.Subheader>\n          GitHub notification timeline with web notification\n        </Header.Subheader>\n      </Header>\n      <Segment className='Welcome-segment' basic textAlign='center'>\n        Nottisue let you know GitHub notifications by web notification. All you\n        need to do is to register your GitHub access token. It will be saved in\n        local storage. Then, you get GitHub notifications through your browser.\n      </Segment>\n      <Segment className='Welcome-segment' basic textAlign='center'>\n        <Header as='h3'>Get started</Header>\n        {inputError && (\n          <span className='Welcome-input-error'>Invalid access token.</span>\n        )}\n        <Input\n          action={\n            <Button\n              primary\n              loading={loading}\n              onClick={async (e) => {\n                if (!token) return\n                setLoading(true)\n                await onRegister(token)\n                setLoading(false)\n              }}>\n              Save\n            </Button>\n          }\n          placeholder='GitHub Access Token'\n          onChange={(e, { value }) => {\n            setToken(value)\n          }}\n          error={inputError}\n        />\n      </Segment>\n    </>\n  )\n}\n\nexport default Welcome\n","import React from 'react'\nimport { Filter } from '../types/Core'\nimport { Segment, Tab, Menu, MenuItemProps } from 'semantic-ui-react'\n\nconst NotificationFilter = (props: {\n  filter: Filter\n  onChange: (filter: Filter) => void\n}) => {\n  const handleItemClick = (e: any, { name }: MenuItemProps) =>\n    props.onChange(name as Filter)\n  return (\n    <Segment basic textAlign='center'>\n      <Menu compact color='blue'>\n        <Menu.Item\n          name='unread'\n          active={props.filter === 'unread'}\n          onClick={handleItemClick}\n          content='UNREAD'\n        />\n        <Menu.Item\n          name='all'\n          active={props.filter === 'all'}\n          onClick={handleItemClick}\n          content='ALL'\n        />\n      </Menu>\n    </Segment>\n  )\n}\n\nexport default NotificationFilter\n","import React, { useState } from 'react'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { findHtmlUrl, sleep } from '../util/Func'\nimport { Button, Modal } from 'semantic-ui-react'\nimport styles from './OpenUnreadButton.module.css'\n\nconst OPENING_INTERVAL = 2000\n\nconst compareUpdateAt = (\n  a: GitHubResponse.Notification,\n  b: GitHubResponse.Notification,\n) => new Date(a.updated_at).getTime() - new Date(a.updated_at).getTime()\n\nconst OpenUnreadButton = (props: {\n  notifications: GitHubResponse.Notification[]\n}) => {\n  const unread = props.notifications\n    .filter((notification) => notification.unread)\n    .sort(compareUpdateAt)\n  const [busy, setBusy] = useState(false)\n  const onClick = async () => {\n    setBusy(true)\n    for (const notification of unread) {\n      const htmlUrl = findHtmlUrl(notification)\n      // TODO: タブをフォーカスさせない\n      window.open(htmlUrl)\n      await sleep(OPENING_INTERVAL)\n    }\n    setBusy(false)\n  }\n  return (\n    <span className={styles.self}>\n      <Button\n        basic\n        color='black'\n        loading={busy}\n        disabled={busy}\n        onClick={onClick}\n        content='OPEN ALL UNREAD'\n      />\n\n      <Modal\n        trigger={\n          <Button circular size='tiny' className={styles.help} icon='help' />\n        }>\n        <Modal.Header>OPEN ALL UNREAD button</Modal.Header>\n        <Modal.Content>\n          <p>\n            Allow browser pop-up feature to use the \"OPEN ALL UNREAD\" button.\n          </p>\n        </Modal.Content>\n      </Modal>\n    </span>\n  )\n}\n\nexport default OpenUnreadButton\n","import React, { useCallback } from 'react'\nimport { Modal, Button } from 'semantic-ui-react'\nimport { useModalContext } from '../../hooks/useModalContext'\n\nconst UnregisterModal = (props: { onUnregister: () => void }) => {\n  const { unregistrationModal: open, setModalState } = useModalContext()\n  const onClose = useCallback(\n    () => setModalState({ unregistrationModal: false }),\n    [],\n  )\n  const onOk = useCallback(() => {\n    props.onUnregister()\n    onClose()\n  }, [])\n  return (\n    <Modal size='mini' open={open} onClose={onClose}>\n      <Modal.Header>Delete Your Access Token</Modal.Header>\n      <Modal.Content>Are you sure?</Modal.Content>\n      <Modal.Actions>\n        <Button negative content='No' onClick={onClose} />\n        <Button\n          positive\n          icon='checkmark'\n          labelPosition='right'\n          content='Yes'\n          onClick={onOk}\n        />\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default UnregisterModal\n","import { GitHubResponse } from '../types/GitHubResponse'\nimport { uniqBy, sort } from 'ramda'\nimport { NotificationMeta, BNotifiedMap } from '../types/Core'\nimport { TypedJSON } from './Func'\n\nconst uniqById = uniqBy((n: GitHubResponse.Notification) => n.id)\nconst sortByUpdate = sort(\n  (n1: GitHubResponse.Notification, n2: GitHubResponse.Notification) =>\n    new Date(n2.updated_at).getTime() - new Date(n1.updated_at).getTime(),\n)\n\nclass DB {\n  private storage = window.localStorage\n\n  private maxNotifications = 500\n  private notificationKey = 'github:notification:items'\n  private metaKey = 'github:notification:meta'\n  private tokenKey = 'github:token'\n  private userKey = 'github:user'\n  private bNotifiedKey = 'browser:notified'\n\n  // --- General\n\n  async drop() {\n    this.storage.clear()\n  }\n\n  // --- Notifications\n\n  async getNotifications(): Promise<GitHubResponse.Notification[]> {\n    const value = this.storage.getItem(this.notificationKey)\n    if (!value) {\n      return []\n    }\n    return TypedJSON.parse(value) as GitHubResponse.Notification[]\n  }\n\n  async saveNotifications(notifications: GitHubResponse.Notification[]) {\n    const saved = await this.getNotifications()\n    const saving = uniqById([...notifications, ...saved])\n    const sorted = sortByUpdate(saving)\n    this.storage.setItem(this.notificationKey, TypedJSON.stringify(sorted))\n  }\n\n  async cleanUpOldNotifications() {\n    const notifications = await this.getNotifications()\n    if (notifications.length <= this.maxNotifications) {\n      return\n    }\n    // updated_at 順にソートされている\n    const reduced = notifications.slice(0, this.maxNotifications)\n    this.storage.setItem(this.notificationKey, TypedJSON.stringify(reduced))\n  }\n\n  // --- NotificationMeta\n\n  async getNotificationMeta(): Promise<NotificationMeta | null> {\n    const value = this.storage.getItem(this.metaKey)\n    if (!value) {\n      return null\n    }\n    return TypedJSON.parse(value) as NotificationMeta\n  }\n\n  async saveNotificationMeta(meta: NotificationMeta) {\n    this.storage.setItem(this.metaKey, TypedJSON.stringify(meta))\n  }\n\n  // --- Browser notification flags\n\n  async getBNotified(): Promise<BNotifiedMap> {\n    const value = this.storage.getItem(this.bNotifiedKey)\n    if (!value) {\n      return {}\n    }\n    return TypedJSON.parse(value) as BNotifiedMap\n  }\n\n  async saveBNotified(bNotified: BNotifiedMap) {\n    const saved = await this.getBNotified()\n    const merged = {\n      ...saved,\n      ...bNotified,\n    }\n    this.storage.setItem(this.bNotifiedKey, TypedJSON.stringify(merged))\n  }\n\n  // --- Access token\n\n  async saveAccessToken(token: string) {\n    this.storage.setItem(this.tokenKey, token)\n  }\n\n  async getAccessToken() {\n    return this.storage.getItem(this.tokenKey)\n  }\n\n  async clearAccessToken() {\n    this.storage.removeItem(this.tokenKey)\n  }\n\n  // --- User\n\n  async saveUser(user: GitHubResponse.User) {\n    this.storage.setItem(this.userKey, TypedJSON.stringify(user))\n  }\n\n  async getUser() {\n    const value = this.storage.getItem(this.userKey)\n    if (!value) {\n      return null\n    }\n    return TypedJSON.parse(value) as GitHubResponse.User\n  }\n\n  async clearUser() {\n    this.storage.removeItem(this.userKey)\n  }\n}\n\nexport default DB\n","import qs from 'qs'\nimport { snake } from 'case'\nimport { pipe } from 'ramda'\nimport { mapObjKey } from './Func'\nimport { PlainObject } from '../types/General'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { NotificationMeta } from '../types/Core'\n\n// --- Constants\n\nconst GITHUB_BASE_URL = 'https://api.github.com'\nconst ApiUrls = {\n  NOTIFICATION_URL: GITHUB_BASE_URL + '/notifications',\n  AUTHENTICATED_USER: GITHUB_BASE_URL + '/user',\n}\n\n// --- Helpers\n\nconst stringifyQuery = (obj: PlainObject): string =>\n  qs.stringify(obj, { format: 'RFC1738' })\nconst keysAsSnake = mapObjKey(snake)\nconst convertQueryValue = mapObjKey((value: any) => {\n  if (value instanceof Date) {\n    return value.toISOString()\n  }\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false'\n  }\n  return value\n})\n\nconst asQuery = pipe(\n  keysAsSnake,\n  convertQueryValue,\n  stringifyQuery,\n)\n\n// --- Module\n\nexport default class GitHubApi {\n  accessToken: string\n\n  constructor(options: { accessToken: string }) {\n    this.accessToken = options.accessToken\n  }\n\n  async fetchNotifications(options: {\n    all?: boolean\n    since?: Date\n    before?: Date\n  }) {\n    const url =\n      ApiUrls.NOTIFICATION_URL +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n        ...options,\n      })\n    const resp = await fetch(url)\n    const json = await resp.json()\n\n    const headersObj: any = {}\n    for await (const [key, value] of resp.headers.entries()) {\n      headersObj[key.toLowerCase()] = value\n    }\n    const headers = headersObj as GitHubResponse.NotificationHeader\n\n    const meta: NotificationMeta = {\n      lastModified: new Date(headers['last-modified']),\n      lastFetched: new Date(),\n      pollInterval: Number(headers['x-poll-interval']),\n    }\n\n    if (!resp.ok) {\n      if (resp.status === 304) {\n        // 304 Not Modified\n        return {\n          meta,\n          notifications: [] as GitHubResponse.Notification[],\n        }\n      }\n      throw new Error(json.message)\n    }\n\n    return {\n      meta,\n      notifications: json as GitHubResponse.Notification[],\n    }\n  }\n\n  async fetchAuthenticatedUser() {\n    const url =\n      ApiUrls.AUTHENTICATED_USER +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n      })\n    const resp = await fetch(url)\n    if (!resp.ok) {\n      console.error(`Failed to fetch user: ${resp.status} ${resp.statusText}`)\n      return null\n    }\n    const user = await resp.json()\n    return user\n  }\n\n  /**\n   * PullRequest や Issue のコメントを取得\n   */\n  async fetchComment(commentUrl: string) {\n    const url =\n      commentUrl +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n      })\n    const resp = await fetch(url)\n    if (!resp.ok) {\n      console.error(`Failed to fetch comment ${resp.status} ${resp.statusText}`)\n      return null\n    }\n    const comment = await resp.json()\n    return comment as GitHubResponse.Comment\n  }\n\n  async markThreadAsRead(threadUrl: string) {\n    const url =\n      threadUrl +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n      })\n    const resp = await fetch(url, {\n      method: 'PATCH',\n    })\n    if (!resp.ok) {\n      console.error(\n        `Failed to mark a thread as read ${resp.status} ${resp.statusText}`,\n      )\n      return false\n    }\n    return true\n  }\n}\n","import { Runnable } from '../types/General'\n\nexport declare namespace TaskScheduler {\n  /** Task は返り値で次に何ms後に実行すればよいかを教える */\n  type Task = () => Promise<number>\n}\n\n/**\n * 定期的に実行するタスクを登録して、時間が来たらタスクが実行されるようにする\n */\nexport default class TaskScheduler implements Runnable {\n  private task: TaskScheduler.Task\n  private timer = -1\n  private minTimeout = 30 * 1000\n  private running = false\n\n  constructor(task: TaskScheduler.Task) {\n    this.task = task\n  }\n\n  // --- Runnable\n\n  async startRunning() {\n    if (this.running) return\n    this.running = true\n\n    const timeout = await this.doTask()\n    this.setNextTimeout(timeout)\n  }\n\n  async stopRunning() {\n    this.running = false\n    clearTimeout(this.timer)\n  }\n\n  // --- Others\n\n  private async doTask() {\n    console.log(`[TaskScheduler] do task`)\n    let timeout = this.minTimeout\n    try {\n      timeout = await this.task()\n    } catch (e) {\n      console.error(e)\n    }\n    return timeout\n  }\n\n  private setNextTimeout(timeout: number) {\n    clearTimeout(this.timer)\n    this.timer = window.setTimeout(async () => {\n      if (!this.running) return\n      const timeout = await this.doTask()\n      this.setNextTimeout(timeout)\n    }, timeout)\n    console.log(`[TaskScheduler] set next time after ${timeout} ms`)\n  }\n}\n","import { Observable, Runnable, Subscription } from '../types/General'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport uuid from 'uuid'\nimport DB from '../util/DB'\nimport GitHubApi from '../util/Api'\nimport TaskScheduler, { TaskScheduler as Scheduler } from './TaskScheduler'\nimport { GitHubObserved } from '../types/Core'\n\ntype Subscription_<T> = Subscription<T>\ntype Observable_<T> = Observable<T>\n\nexport declare namespace GitHubServer {\n  export type Observable = Observable_<GitHubObserved>\n\n  export interface Subscription extends Subscription_<GitHubObserved> {\n    options: any\n  }\n\n  export type SubscribeOption = {}\n}\n\n/**\n * UI が GitHub notifications などを得るためのローカルサーバープロキシ\n * notifications は API から取得され、 DB に保存される\n * UI から取得するのは Observable interface を通じて。\n */\nexport default class GitHubServer implements GitHubServer.Observable, Runnable {\n  private db = new DB()\n  private api = new GitHubApi({ accessToken: '' })\n  private subscriptions = new Map<string, GitHubServer.Subscription>()\n  private user: GitHubResponse.User | null = null\n  private scheduler: TaskScheduler\n  private running = false\n  private ready = false\n\n  // --- Create\n\n  constructor() {\n    this.scheduler = new TaskScheduler(this.notificationsSyncTask)\n  }\n\n  async prepare() {\n    if (this.ready) return\n    const accessToken = await this.db.getAccessToken()\n    const user = await this.db.getUser()\n    if (!accessToken || !user) {\n      this.ready = true\n      return\n    }\n    this.api.accessToken = accessToken\n    this.user = user\n    this.ready = true\n  }\n\n  // --- Observable\n\n  subscribe(\n    observe: (received: GitHubObserved) => void,\n    options: GitHubServer.SubscribeOption,\n  ) {\n    if (!this.running) {\n      throw new Error(`[GitHubServer] Cannot subscribe when not running`)\n    }\n\n    const id = uuid()\n    const subscription: GitHubServer.Subscription = {\n      id,\n      observe,\n      options,\n    }\n    this.subscriptions.set(subscription.id, subscription)\n\n    // subscribe開始したらとりあえずデータを流す\n    void this.publishTo(subscription)\n\n    return subscription\n  }\n\n  unsubscribe() {\n    this.subscriptions.clear()\n  }\n\n  private async publishTo(subscription: GitHubServer.Subscription) {\n    const user = await this.db.getUser()\n    const meta = await this.db.getNotificationMeta()\n    const notifications = await this.db.getNotifications()\n    if (!user || !meta) return\n    subscription.observe({\n      user,\n      meta,\n      notifications,\n    })\n  }\n\n  private async publishToSubscriptions() {\n    for (const subscription of Array.from(this.subscriptions.values())) {\n      await this.publishTo(subscription)\n    }\n  }\n\n  // --- Runnable\n\n  startRunning() {\n    if (!this.user) {\n      throw new Error(`[GitHubServer] Cannot run without user`)\n    }\n    if (this.running) {\n      throw new Error(`[GitHubServer] Already running`)\n    }\n    console.log(`[GitHubServer] start running`)\n    this.running = true\n    void this.scheduler.startRunning()\n  }\n\n  stopRunning() {\n    console.log(`[GitHubServer] stop running`)\n    this.running = false\n    void this.scheduler.stopRunning()\n  }\n\n  canRun(): boolean {\n    return Boolean(this.user) && !this.running\n  }\n\n  // --- Task\n\n  private notificationsSyncTask: Scheduler.Task = async () => {\n    const { meta, notifications } = await this.api.fetchNotifications({\n      // unread 更新のために all true にする\n      all: true,\n    })\n    await this.db.saveNotifications(notifications)\n    await this.db.saveNotificationMeta(meta)\n    const timeout = Math.max(\n      meta.lastFetched.getTime() +\n        meta.pollInterval * 1000 -\n        new Date().getTime(),\n      0,\n    )\n    await this.publishToSubscriptions()\n    return timeout\n  }\n\n  // --- Token registration\n\n  async register(token: string): Promise<GitHubResponse.User | null> {\n    // validate and save user\n    this.api.accessToken = token\n    const user = await this.api.fetchAuthenticatedUser()\n    if (!user) {\n      this.api.accessToken = ''\n      return null\n    }\n    await this.db.saveUser(user)\n    await this.db.saveAccessToken(token)\n    this.user = user\n    return user\n  }\n\n  async unregister() {\n    await this.db.drop()\n  }\n\n  // --- Request\n\n  async fetchLatestComment(notification: GitHubResponse.Notification) {\n    const commentUrl = notification.subject.latest_comment_url\n    if (!commentUrl) {\n      console.error('[GitHubServer] no latest_comment_url in subject')\n      return null\n    }\n    return this.api.fetchComment(commentUrl)\n  }\n\n  async markAsRead(notification: GitHubResponse.Notification) {\n    return this.api.markThreadAsRead(notification.url)\n  }\n\n  // --- Singleton\n\n  private static instance: GitHubServer | undefined = undefined\n  static getInstance(): GitHubServer {\n    if (!GitHubServer.instance) {\n      GitHubServer.instance = new GitHubServer()\n    }\n    return GitHubServer.instance\n  }\n}\n","import { useState, useMemo, useCallback, Dispatch, SetStateAction } from 'react'\nimport useValues from './useValues'\n\nexport declare namespace UseAsync {\n  export type Values<T> = {\n    ready: boolean\n    busy: boolean\n    result: T\n    error: Error | null\n  }\n\n  export type Actions = {\n    reset: () => void\n    doAsync: (arg?: any, options?: DoAsyncOptions) => Promise<void>\n  }\n\n  export type DoAsyncOptions = {\n    force?: boolean\n    allowParallel?: boolean\n  }\n\n  export type State<T> = Values<T> & Actions\n}\n\nconst buildDoAsync = <T>(\n  fn: (arg?: any) => Promise<T>,\n  set: Dispatch<SetStateAction<Partial<UseAsync.Values<T>>>>,\n  ready: boolean,\n  busy: boolean,\n) => async (arg?: any, options?: UseAsync.DoAsyncOptions): Promise<void> => {\n  const { force = false, allowParallel = false } = options || {}\n  if (ready && !force) return\n  if (busy && !allowParallel) return\n\n  set({ busy: true })\n  try {\n    const result = await fn(arg)\n    set({\n      result,\n      ready: true,\n      busy: false,\n    })\n  } catch (e) {\n    console.error(e)\n    set({\n      error: e,\n      busy: false,\n    })\n  }\n}\n\nconst useAsync = <T, S>(\n  fn: (arg?: any) => Promise<T>,\n  emptyResult: S,\n): UseAsync.State<T | S> => {\n  const [{ ready, busy, result, error }, set] = useValues<\n    UseAsync.Values<T | S>\n  >({\n    ready: false,\n    busy: false,\n    result: emptyResult,\n    error: null,\n  })\n  const doAsync = useMemo(() => buildDoAsync(fn, set, ready, busy), [\n    fn,\n    ready,\n    busy,\n  ])\n  const reset = useCallback(\n    () =>\n      set({\n        ready: false,\n        busy: false,\n        result: emptyResult,\n        error: null,\n      }),\n    [emptyResult],\n  )\n  return {\n    ready,\n    busy,\n    result,\n    error,\n    reset,\n    doAsync,\n  }\n}\n\nexport default useAsync\n","import { useEffect } from 'react'\n\nconst useMount = ({\n  onMount,\n  onUnmount,\n}: {\n  onMount: () => any\n  onUnmount: () => any\n}) => {\n  useEffect(() => {\n    void onMount()\n    return () => {\n      onUnmount()\n    }\n  }, [])\n}\n\nexport default useMount\n","const isBrowserNotificationSupported = () => 'Notification' in window\n\n/**\n * Browser Notication\n */\nexport default class BNotification {\n  isGranted = false\n  private lifetime = 10000\n\n  spawnNotification(options: { title: string; body: string }) {\n    if (!this.isGranted) {\n      console.warn(`Cannot spawn notification for not granted`)\n      return\n    }\n    const { title, body } = options\n    const notification = new Notification(title, {\n      body,\n      icon: './logo.png',\n    })\n    setTimeout(notification.close.bind(notification), this.lifetime)\n  }\n\n  async requestPermissionIfNeeded() {\n    if (!isBrowserNotificationSupported()) return\n    if (Notification.permission === 'granted') {\n      this.isGranted = true\n      return\n    }\n    return new Promise((resolve) => {\n      void Notification.requestPermission(\n        (permittion: NotificationPermission) => {\n          this.isGranted = permittion === 'granted'\n          resolve()\n        },\n      )\n    })\n  }\n}\n","import { GitHubResponse } from '../types/GitHubResponse'\nimport BNotification from '../util/BNotification'\nimport { sleep } from '../util/Func'\nimport DB from '../util/DB'\n\nconst DEFAULT_REASONS: GitHubResponse.NotificationReason[] = [\n  'assign',\n  'author',\n  'comment',\n  'invitation',\n  'manual',\n  'mention',\n  'state_change',\n  'subscribed',\n  'team_mention',\n]\n\nconst isBrowserNotificationSupported = () => 'Notification' in window\n\n/**\n * 新しい GitHub notification が来たらブラウザの通知を表示するためのクラス\n */\nexport default class NotificationNotifier {\n  private db = new DB()\n  /** Notification reasons for filter notifications */\n  reasons: GitHubResponse.NotificationReason[]\n  /** Browser notification */\n  bNotification = new BNotification()\n\n  private constructor(options: {\n    reasons?: GitHubResponse.NotificationReason[]\n  }) {\n    this.reasons = options.reasons || DEFAULT_REASONS\n  }\n\n  // --- main methods\n\n  async onNotifications(coming: GitHubResponse.Notification[]) {\n    const valid = await this.validate()\n    if (!valid) return\n\n    const notifications = await this.filterNewNotifications(coming)\n    if (notifications.length > 0) {\n      console.log(\n        `[NotificationNotifier] ${notifications.length} new notifications`,\n      )\n    }\n    for (const notification of notifications) {\n      await this.spawnBrowserNotification(notification)\n      await sleep(3000)\n    }\n  }\n\n  private async validate() {\n    if (!isBrowserNotificationSupported()) return false\n\n    await this.bNotification.requestPermissionIfNeeded()\n    if (!this.bNotification.isGranted) return false\n    return true\n  }\n\n  private async filterNewNotifications(\n    notifications: GitHubResponse.Notification[],\n  ) {\n    const notifiedMap = await this.db.getBNotified()\n    const newNotifications = notifications\n      .filter(({ unread }) => unread)\n      .filter(({ reason }) => this.reasons.includes(reason))\n      .filter(\n        ({ id, updated_at }) =>\n          !notifiedMap[id] ||\n          notifiedMap[id].getTime() < new Date(updated_at).getTime(),\n      )\n    return newNotifications\n  }\n\n  private async spawnBrowserNotification({\n    id,\n    subject,\n    updated_at,\n  }: GitHubResponse.Notification) {\n    await this.db.saveBNotified({ [id]: new Date(updated_at) })\n    this.bNotification.spawnNotification({\n      title: subject.type,\n      body: subject.title,\n    })\n  }\n\n  // --- singleton\n\n  private static instance: NotificationNotifier | null = null\n  static getInstance = () => {\n    if (!NotificationNotifier.instance) {\n      NotificationNotifier.instance = new NotificationNotifier({})\n    }\n    return NotificationNotifier.instance\n  }\n}\n","import React, {\n  useCallback,\n  createContext,\n  useContext,\n  ReactChild,\n} from 'react'\nimport GitHubServer from '../core/GitHubServer'\nimport useMount from './common/useMount'\nimport useValues from './common/useValues'\nimport { GitHubObservedNullable, GitHubObserved } from '../types/Core'\nimport NotificationNotifier from '../core/NotificationNotifier'\n\nconst _useObserver = () => {\n  const server = GitHubServer.getInstance()\n\n  const [{ ready, userRegistered }, setServerState] = useValues({\n    ready: false,\n    userRegistered: false,\n  })\n  const [{ user, notifications, meta }, setObserved] = useValues<\n    GitHubObservedNullable\n  >({\n    user: null,\n    notifications: [],\n    meta: null,\n  })\n\n  const runServer = useCallback(() => {\n    server.startRunning()\n    server.subscribe((received: GitHubObserved) => {\n      setObserved(received)\n      void NotificationNotifier.getInstance().onNotifications(\n        received.notifications,\n      )\n    }, {})\n  }, [])\n  const stopServer = useCallback(() => {\n    server.unsubscribe()\n    server.stopRunning()\n  }, [])\n\n  // ユーザーを登録と　server running は密結合である\n  const registerUser = useCallback(async (token: string) => {\n    const userOrNull = await server.register(token)\n    setServerState({ userRegistered: Boolean(userOrNull) })\n    if (!userOrNull) return null\n    runServer()\n    return userOrNull\n  }, [])\n  const unregisterUser = useCallback(async () => {\n    stopServer()\n    await server.unregister()\n    setServerState({ userRegistered: false })\n    setObserved({\n      user: null,\n      notifications: [],\n      meta: null,\n    })\n  }, [])\n\n  useMount({\n    onMount: async () => {\n      await server.prepare()\n      const userRegistered = server.canRun()\n      if (userRegistered) {\n        runServer()\n      }\n      setServerState({\n        ready: true,\n        userRegistered,\n      })\n    },\n    onUnmount: async () => {\n      stopServer()\n    },\n  })\n\n  return {\n    ready,\n    userRegistered,\n    user,\n    notifications,\n    meta,\n    setObserved,\n    registerUser,\n    unregisterUser,\n  }\n}\n\nconst ObserverContext = createContext<ReturnType<typeof _useObserver>>(\n  null as any,\n)\n\nexport const useObserverContext = () => useContext(ObserverContext)\n\nexport const ObserverContextProvider = (props: { children: ReactChild }) => {\n  const value = _useObserver()\n  return (\n    <ObserverContext.Provider value={value}>\n      {props.children}\n    </ObserverContext.Provider>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { Modal, Dimmer, Loader, Message, Button, Icon } from 'semantic-ui-react'\nimport { UseAsync } from '../../hooks/common/useAsync'\nimport { GitHubResponse } from '../../types/GitHubResponse'\nimport marked from 'marked'\nimport styles from './CommentModal.module.css'\nimport { findHtmlUrl, subjectNumber } from '../../util/Func'\nimport { useModalContext } from '../../hooks/useModalContext'\nimport { useComment } from '../../hooks/useComment'\n\nconst RepositoryLink = ({\n  notification,\n}: {\n  notification: GitHubResponse.Notification\n}) => (\n  <a\n    className={styles.reposLink}\n    href={findHtmlUrl(notification)}\n    target='_blank'>\n    {notification.repository.full_name}#{subjectNumber(notification.subject)}\n  </a>\n)\n\nconst CommentModal = () => {\n  const {\n    commentModal: open,\n    commentModalParams,\n    setModalState,\n  } = useModalContext()\n  const { fetchLatestComment, markAsRead } = useComment()\n\n  const shouldOpen = open && commentModalParams.notification\n\n  useEffect(() => {\n    if (shouldOpen) {\n      void fetchLatestComment.doAsync(commentModalParams.notification, {\n        force: true,\n      })\n    }\n  }, [shouldOpen])\n\n  const onClose = useCallback(() => {\n    setModalState({ commentModal: false, commentModalParams: {} })\n    fetchLatestComment.reset()\n    markAsRead.reset()\n  }, [])\n\n  const body = fetchLatestComment.result && fetchLatestComment.result.body\n\n  if (!shouldOpen) return null\n\n  const notification = commentModalParams.notification!\n\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Modal.Header className={styles.header}>\n        <RepositoryLink notification={notification} />\n        Latest comment by{' '}\n        <span className={styles.user}>\n          @{fetchLatestComment.result && fetchLatestComment.result.user.login}\n        </span>\n      </Modal.Header>\n      <Modal.Content>\n        <Dimmer active={fetchLatestComment.busy} inverted>\n          <Loader inverted />\n        </Dimmer>\n        {fetchLatestComment.ready && body && (\n          <div dangerouslySetInnerHTML={{ __html: marked(body) }} />\n        )}\n        {fetchLatestComment.ready && !body && (\n          <div className={styles.alt}>No comment body</div>\n        )}\n        {fetchLatestComment.error && (\n          <Message\n            negative\n            header={'Error'}\n            content={fetchLatestComment.error.message}\n          />\n        )}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          positive\n          icon='checkmark'\n          labelPosition='right'\n          content='Mark as read'\n          loading={markAsRead.busy}\n          onClick={() => {\n            console.log('onclick', notification)\n            void markAsRead.doAsync(notification).then(() => onClose())\n          }}\n        />\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default CommentModal\n","import GitHubServer from '../core/GitHubServer'\nimport useAsync from './common/useAsync'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { useObserverContext } from './useObserverContext'\n\nexport const useComment = () => {\n  const server = GitHubServer.getInstance()\n  const { notifications, setObserved } = useObserverContext()\n\n  const fetchLatestComment = useAsync(\n    (notification: GitHubResponse.Notification) =>\n      server.fetchLatestComment(notification),\n    null,\n  )\n  const markAsRead = useAsync(\n    async (commenting: GitHubResponse.Notification) => {\n      const ok = await server.markAsRead(commenting)\n      // これはAPIを経由しないでデータを更新するので悪い実装\n      if (!ok) return false\n      const index = notifications.findIndex(({ id }) => commenting.id === id)\n      if (index < 0) return false\n      const nextNotifications = [...notifications]\n      nextNotifications[index] = {\n        ...commenting,\n        unread: false,\n      }\n      setObserved({ notifications: nextNotifications })\n      return true\n    },\n    false,\n  )\n\n  return {\n    fetchLatestComment,\n    markAsRead,\n  }\n}\n","import React from 'react'\nimport UnregisterModal from './UnregisterModal'\nimport CommentModal from './CommentModal'\nimport { UseAsync } from '../../hooks/common/useAsync'\nimport { GitHubResponse } from '../../types/GitHubResponse'\n\nconst Modals = ({ onUnregister }: { onUnregister: () => void }) => {\n  return (\n    <>\n      <UnregisterModal onUnregister={onUnregister} />\n      <CommentModal />\n    </>\n  )\n}\n\nexport default Modals\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Container, Header, Modal } from 'semantic-ui-react'\nimport LayoutHeader from './components/LayoutHeader'\nimport NotificationList from './components/NotificationList'\nimport { NotificationMeta, Filter } from './types/Core'\nimport Welcome from './components/Welcome'\nimport NotificationFilter from './components/NotificationFilter'\nimport OpenUnreadButton from './components/OpenUnreadButton'\nimport Modals from './components/modals/Modals'\nimport { useObserverContext } from './hooks/useObserverContext'\n\nconst App = () => {\n  const {\n    ready,\n    userRegistered,\n    user,\n    notifications,\n    meta,\n    registerUser,\n    unregisterUser,\n  } = useObserverContext()\n  const [filter, setFilter] = useState<Filter>('unread')\n\n  if (!ready) return null\n\n  return (\n    <div className='App'>\n      <LayoutHeader user={user} />\n\n      <Container text style={{ paddingTop: '5em', marginBottom: '2em' }}>\n        {userRegistered && (\n          <>\n            <NotificationFilter filter={filter} onChange={setFilter} />\n            <div className='App-OpenUnreadButton'>\n              <OpenUnreadButton notifications={notifications} />\n            </div>\n            <NotificationList notifications={notifications} filter={filter} />\n          </>\n        )}\n        {!userRegistered && <Welcome onRegister={registerUser} />}\n      </Container>\n\n      <Modals onUnregister={unregisterUser} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'semantic-ui-css/semantic.min.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { ModalContextProvider } from './hooks/useModalContext'\nimport { ObserverContextProvider } from './hooks/useObserverContext'\n\nReactDOM.render(\n  <ModalContextProvider>\n    <ObserverContextProvider>\n      <App />\n    </ObserverContextProvider>\n  </ModalContextProvider>,\n  document.getElementById('root'),\n)\n\nserviceWorker.register()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"CommentModal_header__2J5EE\",\"alt\":\"CommentModal_alt__1VVRI\",\"reposLink\":\"CommentModal_reposLink__r9SC2\",\"user\":\"CommentModal_user__38fQS\"};"],"sourceRoot":""}