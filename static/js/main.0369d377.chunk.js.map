{"version":3,"sources":["components/LayoutHeader.tsx","core/NotificationTrigger.ts","util/BNotification.ts","util/Func.ts","core/NotificationNotifier.ts","util/Api.ts","util/DB.ts","core/Hub.ts","components/NotificationList.tsx","components/Welcome.tsx","components/UnregisterModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayoutHeader","props","react_default","a","createElement","Menu","fixed","inverted","Container","Item","header","Header","as","Image","size","src","style","marginRight","position","user","Dropdown","trigger","color","avatar","avatar_url","name","options","key","text","icon","onClick","onStartUnregister","NotificationTrigger","task","Object","classCallCheck","this","timer","taskWaiting","meta","_this","stopTimer","lastFetched","pollInterval","time","Math","max","getTime","Date","window","setTimeout","console","log","concat","clearInterval","BNotification","isGranted","lifetime","title","body","notification","Notification","close","bind","warn","permission","Promise","resolve","requestPermission","permittion","mapObjKey","callbackfn","obj","entries","map","_ref","_ref2","slicedToArray","value","reduce","_ref3","_ref4","objectSpread","defineProperty","sleep","replacer","rawValue","$type","$value","reviver","TypedJSON","JSON","stringify","parse","origins","pathParsers","pullRequestApi","PathParser","pullRequestHtml","issueApi","issueHtml","DEFAULT_REASONS","NotificationNotifier","reasons","bNotification","coming","requestPermissionIfNeeded","notifications","filter","includes","reason","length","spawnNotification","subject","type","ApiUrls","GITHUB_BASE_URL","keysAsSnake","snake","convertQueryValue","toISOString","asQuery","pipe","qs","format","GitHubApi","accessToken","url","fetch","resp","json","headersObj","headers","toLowerCase","lastModified","Number","ok","status","Error","message","error","statusText","uniqById","uniqBy","n","id","sortByUpdate","sort","n1","n2","updated_at","DB","storage","localStorage","maxNotifications","notificationKey","metaKey","tokenKey","userKey","clear","getItem","getNotifications","saved","saving","toConsumableArray","sorted","setItem","reduced","slice","token","removeItem","Hub","ui","api","db","readyToken","assign","app","fetchAuthenticatedUser","saveUser","saveAccessToken","drop","all","fetchNotifications","filterNewNotifications","newNotifications","onNewNotifications","saveNotifications","saveNotificationMeta","onData","getAccessToken","getNotificationMeta","getUser","undefined","existings","unread","exists","ListItemDesc","className","children","ListItem","date","repository","htmlUrl","_notification$subject","pathname","URL","repositoryUrl","html_url","matched","test","build","findHtmlUrl","List","target","href","Content","floated","Label","tag","Detail","Icon","verticalAlign","Description","NotificationList_ListItemDesc","full_name","moment","NotificationList","divided","relaxed","selection","NotificationList_ListItem","Welcome","onRegister","errorToken","_useState","useState","_useState2","setToken","_useState3","_useState4","loading","setLoading","Fragment","textAlign","Subheader","Segment","basic","Message","negative","hidden","Input","action","Button","primary","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","abrupt","stop","_x","apply","arguments","placeholder","onChange","UnregisterModal","open","onClose","onOk","Modal","Actions","content","positive","labelPosition","App","hub","notifier","state","ready","unregisterActive","register","sent","setState","startPolling","_this2","_this$state","components_LayoutHeader","paddingTop","src_components_NotificationList","components_Welcome","components_UnregisterModal","_callee2","_context2","unregister","location","reload","data","_this3","_onNewNotifications","_callee3","_context3","_x2","_callee4","_context4","syncFromAPI","t0","setNextTime","restoreFromDB","stopPolling","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration"],"mappings":"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","file":"static/js/main.0369d377.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Image, Menu, Header, Dropdown } from 'semantic-ui-react'\nimport { GitHubResponse } from '../types/GitHubResponse'\n\nconst LayoutHeader = (props: {\n  user?: GitHubResponse.User\n  onStartUnregister: () => void\n}) => (\n  <Menu fixed='top' inverted>\n    <Container>\n      <Menu.Item header>\n        <Header as='h3' inverted>\n          <Image size='mini' src='logo.png' style={{ marginRight: '1.5em' }} />\n          Notissue\n        </Header>\n      </Menu.Item>\n\n      <Menu.Menu position='right'>\n        <Menu.Item>\n          {props.user && (\n            <Dropdown\n              header='Signed in by GitHub'\n              trigger={\n                <span style={{ color: 'white' }}>\n                  <Image avatar src={props.user.avatar_url} />\n                  {props.user.name}\n                </span>\n              }\n              options={[\n                {\n                  key: 'unregister',\n                  text: 'Unregister token',\n                  icon: 'sign out',\n                  onClick: props.onStartUnregister,\n                },\n              ]}\n            />\n          )}\n        </Menu.Item>\n      </Menu.Menu>\n    </Container>\n  </Menu>\n)\n\nexport default LayoutHeader\n","import { NotificationMeta } from '../types/Core'\n\nclass NotificationTrigger {\n  private timer = -1\n\n  private task: () => any\n  private taskWaiting = false\n\n  constructor(task: () => any) {\n    this.task = task\n  }\n\n  setNextTime(meta: NotificationMeta) {\n    this.stopTimer()\n    this.taskWaiting = true\n\n    const { lastFetched, pollInterval } = meta\n    const time = Math.max(\n      lastFetched.getTime() + pollInterval * 1000 - new Date().getTime(),\n      0,\n    )\n    this.timer = window.setTimeout(() => {\n      if (!this.taskWaiting) return\n      this.taskWaiting = false\n      console.log('[NotificationTrigger] task triggered')\n      this.task()\n    }, time)\n    console.log(`[NotificationTrigger] set next time after ${time} ms`)\n  }\n\n  stopTimer() {\n    clearInterval(this.timer)\n    this.taskWaiting = false\n  }\n}\n\nexport default NotificationTrigger\n","const isBrowserNotificationSupported = () => 'Notification' in window\n\n/**\n * Browser Notication\n */\nexport default class BNotification {\n  isGranted = false\n  private lifetime = 10000\n\n  spawnNotification(options: { title: string; body: string }) {\n    if (!this.isGranted) {\n      console.warn(`Cannot spawn notification for not granted`)\n      return\n    }\n    const { title, body } = options\n    const notification = new Notification(title, {\n      body,\n      // TODO: icon, image\n    })\n    setTimeout(notification.close.bind(notification), this.lifetime)\n  }\n\n  async requestPermissionIfNeeded() {\n    if (!isBrowserNotificationSupported()) return\n    if (Notification.permission === 'granted') {\n      this.isGranted = true\n      return\n    }\n    return new Promise((resolve) => {\n      Notification.requestPermission((permittion: NotificationPermission) => {\n        this.isGranted = permittion === 'granted'\n        resolve()\n      })\n    })\n  }\n}\n","import { PlainObject } from '../types/General'\nimport moment from 'moment'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport PathParser from 'path-parser'\n\nexport const mapObjKey = (callbackfn: (key: string) => string) => (\n  obj: PlainObject,\n): PlainObject =>\n  Object.entries(obj)\n    .map(([key, value]) => [callbackfn(key), value])\n    .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n\nexport const mapObjValue = (callbackfn: (value: any) => any) => (\n  obj: PlainObject,\n): PlainObject =>\n  Object.entries(obj)\n    .map(([key, value]) => [key, callbackfn(value)])\n    .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n\nexport const sleep = (time: number) =>\n  new Promise((resolve) => setTimeout(resolve, time))\n\nexport const formatDate = (date: Date | string) =>\n  moment(date).format('YYYY/MM/DD HH:mm')\n\nconst DATE = 'Date'\nconst replacer = function(key: string, value: any): any {\n  const rawValue = this[key]\n  if (rawValue instanceof Date) {\n    return {\n      $type: DATE,\n      $value: rawValue.getTime(),\n    }\n  }\n  return value\n}\nconst reviver = function(key: string, value: any) {\n  if (value && value.$type === DATE) {\n    return new Date(value.$value)\n  }\n  return value\n}\nexport const TypedJSON = {\n  stringify: (value: any) => JSON.stringify(value, replacer),\n  parse: (text: string) => JSON.parse(text, reviver),\n}\n\nconst origins = {\n  api: 'https://api.github.com',\n  html: 'https://github.com',\n}\nconst pathParsers = {\n  pullRequestApi: new PathParser('/repos/:owner/:repo/pulls/:number'),\n  pullRequestHtml: new PathParser('/:owner/:repo/pull/:number'),\n  issueApi: new PathParser('/repos/:owner/:repo/issues/:number'),\n  issueHtml: new PathParser('/:owner/:repo/issues/:number'),\n}\nexport const findHtmlUrl = (\n  notification: GitHubResponse.Notification,\n): string => {\n  const { type, url } = notification.subject\n  const { pathname } = new URL(url)\n  const repositoryUrl = notification.repository.html_url // マッチしないとき用の URL\n  switch (type) {\n    case 'PullRequest': {\n      const matched = pathParsers.pullRequestApi.test(pathname)\n      if (!matched) {\n        console.error(\n          `Something wrong on finding HTML URL. Type is \"PullRequest\", but given URL is ${url}`,\n        )\n        return repositoryUrl\n      }\n      return origins.html + pathParsers.pullRequestHtml.build(matched)\n    }\n    case 'Issue': {\n      const matched = pathParsers.issueApi.test(pathname)\n      if (!matched) {\n        console.error(\n          `Something wrong on finding HTML URL. Type is \"Issue\", but given URL is ${url}`,\n        )\n        return repositoryUrl\n      }\n      return origins.html + pathParsers.issueHtml.build(matched)\n    }\n    default:\n      return repositoryUrl\n  }\n}\n","import { NotificationListener } from '../types/Core'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport BNotification from '../util/BNotification'\nimport { sleep } from '../util/Func'\n\nconst DEFAULT_REASONS: GitHubResponse.NotificationReason[] = [\n  'assign',\n  'author',\n  'comment',\n  'invitation',\n  'manual',\n  'mention',\n  'state_change',\n  'subscribed',\n  'team_mention',\n]\n\nconst isBrowserNotificationSupported = () => 'Notification' in window\n\nexport default class NotificationNotifier implements NotificationListener {\n  /** Notification reasons for filter notifications */\n  reasons: GitHubResponse.NotificationReason[]\n  /** Browser notification */\n  bNotification = new BNotification()\n\n  constructor(options: { reasons?: GitHubResponse.NotificationReason[] }) {\n    this.reasons = options.reasons || DEFAULT_REASONS\n  }\n\n  async onNewNotifications(coming: GitHubResponse.Notification[]) {\n    if (!isBrowserNotificationSupported()) return\n\n    await this.bNotification.requestPermissionIfNeeded()\n    if (!this.bNotification.isGranted) return\n\n    const notifications = coming.filter((notification) =>\n      this.reasons.includes(notification.reason),\n    )\n    if (notifications.length > 0) {\n      console.log(`${notifications.length} new notifications`)\n    }\n    for (const notification of notifications) {\n      this.bNotification.spawnNotification({\n        title: notification.subject.type,\n        body: notification.subject.title,\n      })\n      await sleep(3000)\n    }\n  }\n}\n","import qs from 'qs'\nimport { snake } from 'case'\nimport { pipe } from 'ramda'\nimport { mapObjKey } from './Func'\nimport { PlainObject } from '../types/General'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { NotificationMeta } from '../types/Core'\n\n// --- Constants\n\nconst GITHUB_BASE_URL = 'https://api.github.com'\nconst ApiUrls = {\n  NOTIFICATION_URL: GITHUB_BASE_URL + '/notifications',\n  AUTHENTICATED_USER: GITHUB_BASE_URL + '/user',\n}\n\n// --- Helpers\n\nconst stringifyQuery = (obj: PlainObject): string =>\n  qs.stringify(obj, { format: 'RFC1738' })\nconst keysAsSnake = mapObjKey(snake)\nconst convertQueryValue = mapObjKey((value: any) => {\n  if (value instanceof Date) {\n    return value.toISOString()\n  }\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false'\n  }\n  return value\n})\n\nconst asQuery = pipe(\n  keysAsSnake,\n  convertQueryValue,\n  stringifyQuery,\n)\n\n// --- Module\n\nexport default class GitHubApi {\n  accessToken: string\n\n  constructor(options: { accessToken: string }) {\n    this.accessToken = options.accessToken\n  }\n\n  async fetchNotifications(options: {\n    all?: boolean\n    since?: Date\n    before?: Date\n  }) {\n    const url =\n      ApiUrls.NOTIFICATION_URL +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n        ...options,\n      })\n    const resp = await fetch(url)\n    const json = await resp.json()\n\n    const headersObj: any = {}\n    for await (const [key, value] of resp.headers.entries()) {\n      headersObj[key.toLowerCase()] = value\n    }\n    const headers = headersObj as GitHubResponse.NotificationHeader\n\n    const meta: NotificationMeta = {\n      lastModified: new Date(headers['last-modified']),\n      lastFetched: new Date(),\n      pollInterval: Number(headers['x-poll-interval']),\n    }\n\n    if (!resp.ok) {\n      if (resp.status === 304) {\n        // 304 Not Modified\n        return {\n          meta,\n          notifications: [] as GitHubResponse.Notification[],\n        }\n      }\n      throw new Error(json.message)\n    }\n\n    return {\n      meta,\n      notifications: json as GitHubResponse.Notification[],\n    }\n  }\n\n  async fetchAuthenticatedUser() {\n    const url =\n      ApiUrls.AUTHENTICATED_USER +\n      '?' +\n      asQuery({\n        accessToken: this.accessToken,\n      })\n    const resp = await fetch(url)\n    if (!resp.ok) {\n      console.error(`Failed to fetch user: ${resp.status} ${resp.statusText}`)\n      return null\n    }\n    const user = await resp.json()\n    return user\n  }\n}\n","import { GitHubResponse } from '../types/GitHubResponse'\nimport { uniqBy, sort } from 'ramda'\nimport { NotificationMeta } from '../types/Core'\nimport { TypedJSON } from './Func'\n\nconst uniqById = uniqBy((n: GitHubResponse.Notification) => n.id)\nconst sortByUpdate = sort(\n  (n1: GitHubResponse.Notification, n2: GitHubResponse.Notification) =>\n    new Date(n2.updated_at).getTime() - new Date(n1.updated_at).getTime(),\n)\n\nclass DB {\n  storage = window.localStorage\n\n  maxNotifications = 500\n  notificationKey = 'github:notification:items'\n  metaKey = 'github:notification:meta'\n  tokenKey = 'github:token'\n  userKey = 'github:user'\n\n  // --- General\n\n  async drop() {\n    this.storage.clear()\n  }\n\n  // --- Notifications\n\n  async getNotifications(): Promise<GitHubResponse.Notification[]> {\n    const value = this.storage.getItem(this.notificationKey)\n    if (!value) {\n      return []\n    }\n    return TypedJSON.parse(value) as GitHubResponse.Notification[]\n  }\n\n  async saveNotifications(notifications: GitHubResponse.Notification[]) {\n    const saved = await this.getNotifications()\n    const saving = uniqById([...notifications, ...saved])\n    const sorted = sortByUpdate(saving)\n    this.storage.setItem(this.notificationKey, TypedJSON.stringify(sorted))\n  }\n\n  async cleanUpOldNotifications() {\n    const notifications = await this.getNotifications()\n    if (notifications.length <= this.maxNotifications) {\n      return\n    }\n    // updated_at 順にソートされている\n    const reduced = notifications.slice(0, this.maxNotifications)\n    this.storage.setItem(this.notificationKey, TypedJSON.stringify(reduced))\n  }\n\n  // --- NotificationMeta\n\n  async getNotificationMeta(): Promise<NotificationMeta | null> {\n    const value = this.storage.getItem(this.metaKey)\n    if (!value) {\n      return null\n    }\n    return TypedJSON.parse(value) as NotificationMeta\n  }\n\n  async saveNotificationMeta(meta: NotificationMeta) {\n    this.storage.setItem(this.metaKey, TypedJSON.stringify(meta))\n  }\n\n  // --- Access token\n\n  async saveAccessToken(token: string) {\n    this.storage.setItem(this.tokenKey, token)\n  }\n\n  async getAccessToken() {\n    return this.storage.getItem(this.tokenKey)\n  }\n\n  async clearAccessToken() {\n    this.storage.removeItem(this.tokenKey)\n  }\n\n  // --- User\n\n  async saveUser(user: GitHubResponse.User) {\n    this.storage.setItem(this.userKey, TypedJSON.stringify(user))\n  }\n\n  async getUser() {\n    const value = this.storage.getItem(this.userKey)\n    if (!value) {\n      return null\n    }\n    return TypedJSON.parse(value) as GitHubResponse.User\n  }\n\n  async clearUser() {\n    this.storage.removeItem(this.userKey)\n  }\n}\n\nexport default DB\n","import GitHubApi from '../util/Api'\nimport DB from '../util/DB'\nimport { HubUI } from '../types/Core'\nimport { GitHubResponse } from '../types/GitHubResponse'\n\n/**\n * Data hub to connect Request, DB, UI\n */\nexport default class Hub {\n  private api: GitHubApi\n  private db: DB\n  private ui: HubUI\n\n  readyToken = false\n\n  constructor(ui: HubUI) {\n    this.api = new GitHubApi({ accessToken: '' })\n    this.db = new DB()\n    this.ui = ui\n    // For debug\n    Object.assign(window, {\n      app: {\n        db: this.db,\n        api: this.api,\n      },\n    })\n  }\n\n  async register(token: string): Promise<GitHubResponse.User | null> {\n    // validate and save user\n    this.api.accessToken = token\n    const user = await this.api.fetchAuthenticatedUser()\n    if (!user) {\n      this.api.accessToken = ''\n      return null\n    }\n    await this.db.saveUser(user)\n    await this.db.saveAccessToken(token)\n    return user\n  }\n\n  async unregister() {\n    await this.db.drop()\n  }\n\n  async syncFromAPI(options?: { all: boolean }) {\n    // unread 更新のために all true にする...？\n    const { all = true } = options || {}\n    const { meta, notifications } = await this.api.fetchNotifications({ all })\n\n    const newNotifications = await this.filterNewNotifications(notifications)\n    this.ui.onNewNotifications(newNotifications)\n    await this.db.saveNotifications(notifications)\n    await this.db.saveNotificationMeta(meta)\n\n    this.ui.onData({\n      // DB から取得し直す\n      notifications: await this.db.getNotifications(),\n      meta,\n    })\n  }\n\n  async restoreFromDB() {\n    const accessToken = await this.db.getAccessToken()\n    if (!accessToken) return\n    this.readyToken = true\n    this.api.accessToken = accessToken\n    const notifications = await this.db.getNotifications()\n    const meta = await this.db.getNotificationMeta()\n    const user = await this.db.getUser()\n    this.ui.onData({\n      notifications,\n      meta,\n      user: user || undefined,\n    })\n  }\n\n  private async filterNewNotifications(\n    notifications: GitHubResponse.Notification[],\n  ) {\n    const existings: {\n      [id: string]: GitHubResponse.Notification\n    } = (await this.db.getNotifications()).reduce(\n      (obj, n) => Object.assign(obj, { [n.id]: n }),\n      {},\n    )\n    const newNotifications = notifications.filter(\n      ({ id, updated_at, unread }) => {\n        if (!unread) return false // 既読は無視\n        const exists = existings[id]\n        if (!exists) return true // 新規なので\n        if (exists.updated_at !== updated_at) return true // 更新されたので\n        return false\n      },\n    )\n    return newNotifications\n  }\n}\n","import React from 'react'\nimport { List, Label } from 'semantic-ui-react'\nimport { GitHubResponse } from '../types/GitHubResponse'\nimport { formatDate, findHtmlUrl } from '../util/Func'\nimport './NotificationList.css'\n\nconst ListItemDesc = (props: { children: any }) => (\n  <span className='NotificationListItem-desc-item'>{props.children}</span>\n)\n\nconst ListItem = (props: { notification: GitHubResponse.Notification }) => {\n  const { notification } = props\n  const { subject, updated_at, unread, repository, reason } = notification\n  const { title, type } = subject\n  const htmlUrl = findHtmlUrl(notification)\n  return (\n    <List.Item\n      className='NotificationListItem'\n      as='a'\n      target='_blank'\n      href={htmlUrl}>\n      <List.Content floated='right'>\n        <Label tag>\n          {type}\n          <Label.Detail>{reason}</Label.Detail>\n        </Label>\n      </List.Content>\n      <List.Icon\n        name={unread ? 'circle outline' : 'check circle outline'}\n        verticalAlign='top'\n      />\n      <List.Content>\n        <List.Header>{title}</List.Header>\n        <List.Description className='NotificationListItem-desc'>\n          <ListItemDesc>{repository.full_name}</ListItemDesc>\n          <ListItemDesc>At {formatDate(updated_at)}</ListItemDesc>\n        </List.Description>\n      </List.Content>\n    </List.Item>\n  )\n}\n\nconst NotificationList = (props: {\n  notifications: GitHubResponse.Notification[]\n}) => (\n  <List\n    divided\n    verticalAlign='middle'\n    relaxed='very'\n    selection\n    className='NotificationList'>\n    {props.notifications.map((notification) => (\n      <ListItem key={notification.id} notification={notification} />\n    ))}\n  </List>\n)\n\nexport default NotificationList\n","import React, { useState } from 'react'\nimport {\n  Header,\n  Image,\n  Segment,\n  Input,\n  Button,\n  Message,\n} from 'semantic-ui-react'\n\nconst Welcome = (props: {\n  onRegister: (token: string) => Promise<void>\n  errorToken: boolean\n}) => {\n  const { onRegister, errorToken } = props\n  const [token, setToken] = useState('')\n  const [loading, setLoading] = useState(false)\n  return (\n    <>\n      <Header as='h1' icon textAlign='center'>\n        <Image size='massive' src='logo.png' />\n        <Header.Content>Notissue</Header.Content>\n        <Header.Subheader>\n          GitHub notification timeline with web notification\n        </Header.Subheader>\n      </Header>\n      <Segment className='Welcome-segment' basic textAlign='center'>\n        Nottisue let you know GitHub notifications by web notification. All you\n        need to do is to register your GitHub access token. It will be saved in\n        local storage. Then, you get GitHub notifications through your browser.\n      </Segment>\n      <Segment className='Welcome-segment' basic textAlign='center'>\n        <Header as='h3'>Get started</Header>\n        <Message\n          negative\n          className='Welcome-input-error'\n          size='mini'\n          hidden={!errorToken}>\n          <Message.Header>Invalid access token.</Message.Header>\n        </Message>\n        <Input\n          action={\n            <Button\n              primary\n              loading={loading}\n              onClick={async (e) => {\n                if (!token) return\n                setLoading(true)\n                await onRegister(token)\n                setLoading(false)\n              }}>\n              Save\n            </Button>\n          }\n          placeholder='GitHub Access Token'\n          onChange={(e, { value }) => {\n            setToken(value)\n          }}\n        />\n      </Segment>\n    </>\n  )\n}\n\nexport default Welcome\n","import React from 'react'\nimport { Modal, Button } from 'semantic-ui-react'\n\nconst UnregisterModal = (props: {\n  open: boolean\n  onClose: () => void\n  onOk: () => void\n}) => {\n  const { open, onClose, onOk } = props\n  return (\n    <Modal size='mini' open={open} onClose={onClose}>\n      <Modal.Header>Delete Your Access Token</Modal.Header>\n      <Modal.Content>Are you sure?</Modal.Content>\n      <Modal.Actions>\n        <Button negative content='No' onClick={onClose} />\n        <Button\n          positive\n          icon='checkmark'\n          labelPosition='right'\n          content='Yes'\n          onClick={onOk}\n        />\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default UnregisterModal\n","import React, { Component } from 'react'\nimport './App.css'\nimport { Container, Header, Modal } from 'semantic-ui-react'\nimport LayoutHeader from './components/LayoutHeader'\nimport NotificationTrigger from './core/NotificationTrigger'\nimport NotificationNotifier from './core/NotificationNotifier'\nimport Hub from './core/Hub'\nimport { GitHubResponse } from './types/GitHubResponse'\nimport NotificationList from './components/NotificationList'\nimport { NotificationMeta } from './types/Core'\nimport Welcome from './components/Welcome'\nimport UnregisterModal from './components/UnregisterModal'\n\ninterface State {\n  notifications: GitHubResponse.Notification[]\n  meta: NotificationMeta | null\n  user?: GitHubResponse.User\n  ready: boolean\n  readyToken: boolean\n  errorToken: boolean\n  unregisterActive: boolean\n}\n\nclass App extends Component<{}, State> {\n  render() {\n    const {\n      notifications,\n      ready,\n      readyToken,\n      errorToken,\n      user,\n      unregisterActive,\n    } = this.state\n    return (\n      <div className='App'>\n        <LayoutHeader user={user} onStartUnregister={this.onStartUnregister} />\n\n        <Container text style={{ paddingTop: '6em' }}>\n          {ready && readyToken && (\n            <NotificationList notifications={notifications} />\n          )}\n          {ready && !readyToken && (\n            <Welcome onRegister={this.onRegister} errorToken={errorToken} />\n          )}\n        </Container>\n\n        <UnregisterModal\n          open={unregisterActive}\n          onClose={() => this.setState({ unregisterActive: false })}\n          onOk={async () => {\n            this.setState({ unregisterActive: false })\n            await this.hub.unregister()\n            location.reload()\n          }}\n        />\n      </div>\n    )\n  }\n\n  trigger!: NotificationTrigger\n  hub!: Hub\n  notifier!: NotificationNotifier\n\n  state: State = {\n    notifications: [],\n    meta: null,\n    user: undefined,\n    ready: false,\n    readyToken: false,\n    errorToken: false,\n    unregisterActive: false,\n  }\n\n  // --- Lifecycles\n\n  async componentDidMount() {\n    this.notifier = new NotificationNotifier({})\n    this.hub = new Hub({\n      onData: (data: {\n        notifications: GitHubResponse.Notification[]\n        meta: NotificationMeta | null\n        user?: GitHubResponse.User\n      }) => this.setState(data),\n      onNewNotifications: async (coming: GitHubResponse.Notification[]) => {\n        await this.notifier.onNewNotifications(coming)\n      },\n    })\n    this.trigger = new NotificationTrigger(async () => {\n      try {\n        await this.hub.syncFromAPI()\n      } catch (e) {\n        console.error(e)\n      }\n      this.trigger.setNextTime(this.state.meta!)\n    })\n\n    await this.hub.restoreFromDB()\n\n    if (this.hub.readyToken) {\n      void this.startPolling()\n      this.setState({ readyToken: true })\n    }\n    this.setState({ ready: true })\n  }\n\n  componentWillUnmount() {\n    this.stopPolling()\n  }\n\n  // --- Polling\n\n  async startPolling() {\n    if (!this.state.meta) {\n      // metaが更新される\n      await this.hub.syncFromAPI({ all: true })\n    }\n    this.trigger.setNextTime(this.state.meta!)\n  }\n\n  stopPolling() {\n    this.trigger.stopTimer()\n  }\n\n  // --- Callbacks\n\n  onRegister = async (token: string) => {\n    const user = await this.hub.register(token)\n    if (user) {\n      this.setState({ readyToken: true, errorToken: false, user })\n      void this.startPolling()\n    } else {\n      this.setState({ errorToken: true })\n    }\n  }\n\n  onStartUnregister = () => {\n    this.setState({ unregisterActive: true })\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'semantic-ui-css/semantic.min.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}